# Generated from CommandParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,192,969,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,
        1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,
        15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,
        22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,4,24,121,8,
        24,11,24,12,24,122,1,25,1,25,1,25,3,25,128,8,25,1,25,1,25,1,25,1,
        25,1,25,3,25,135,8,25,1,26,1,26,1,26,1,26,3,26,141,8,26,1,26,3,26,
        144,8,26,1,26,1,26,3,26,148,8,26,1,26,1,26,3,26,152,8,26,1,26,1,
        26,3,26,156,8,26,1,26,1,26,1,26,3,26,161,8,26,1,26,1,26,3,26,165,
        8,26,1,26,1,26,1,26,3,26,170,8,26,1,26,3,26,173,8,26,1,26,1,26,3,
        26,177,8,26,1,26,3,26,180,8,26,1,26,3,26,183,8,26,1,26,1,26,3,26,
        187,8,26,1,26,1,26,3,26,191,8,26,1,26,3,26,194,8,26,1,26,1,26,3,
        26,198,8,26,1,26,3,26,201,8,26,1,26,1,26,1,26,3,26,206,8,26,1,26,
        1,26,3,26,210,8,26,1,26,3,26,213,8,26,1,26,1,26,3,26,217,8,26,1,
        26,3,26,220,8,26,1,26,3,26,223,8,26,1,26,3,26,226,8,26,1,26,1,26,
        3,26,230,8,26,1,26,3,26,233,8,26,1,26,1,26,3,26,237,8,26,1,26,1,
        26,1,26,3,26,242,8,26,1,26,3,26,245,8,26,1,26,1,26,1,26,3,26,250,
        8,26,1,26,1,26,1,26,3,26,255,8,26,1,26,1,26,3,26,259,8,26,1,26,3,
        26,262,8,26,1,26,1,26,3,26,266,8,26,1,26,3,26,269,8,26,1,26,3,26,
        272,8,26,1,26,1,26,1,26,3,26,277,8,26,1,26,1,26,3,26,281,8,26,1,
        26,1,26,3,26,285,8,26,1,26,3,26,288,8,26,1,26,3,26,291,8,26,1,26,
        1,26,3,26,295,8,26,1,26,1,26,3,26,299,8,26,1,26,3,26,302,8,26,1,
        26,1,26,3,26,306,8,26,1,26,3,26,309,8,26,1,26,1,26,3,26,313,8,26,
        1,26,1,26,1,26,3,26,318,8,26,1,26,1,26,3,26,322,8,26,1,26,1,26,1,
        26,1,26,1,26,3,26,329,8,26,1,26,1,26,1,26,3,26,334,8,26,1,26,3,26,
        337,8,26,1,26,3,26,340,8,26,1,26,3,26,343,8,26,1,26,1,26,3,26,347,
        8,26,1,26,3,26,350,8,26,1,26,3,26,353,8,26,1,26,3,26,356,8,26,1,
        26,1,26,3,26,360,8,26,1,26,3,26,363,8,26,1,26,3,26,366,8,26,1,26,
        1,26,3,26,370,8,26,1,26,1,26,3,26,374,8,26,1,26,1,26,1,26,1,26,1,
        26,1,26,3,26,382,8,26,1,26,1,26,1,26,3,26,387,8,26,1,26,1,26,3,26,
        391,8,26,1,26,3,26,394,8,26,1,26,3,26,397,8,26,1,26,3,26,400,8,26,
        1,26,1,26,3,26,404,8,26,1,26,3,26,407,8,26,1,26,3,26,410,8,26,1,
        26,3,26,413,8,26,1,26,1,26,3,26,417,8,26,1,26,3,26,420,8,26,1,26,
        3,26,423,8,26,1,26,3,26,426,8,26,1,26,1,26,3,26,430,8,26,1,26,3,
        26,433,8,26,1,26,3,26,436,8,26,1,26,1,26,3,26,440,8,26,1,26,3,26,
        443,8,26,1,26,3,26,446,8,26,1,26,1,26,3,26,450,8,26,1,26,3,26,453,
        8,26,1,26,3,26,456,8,26,1,26,3,26,459,8,26,1,26,1,26,1,26,3,26,464,
        8,26,1,26,1,26,3,26,468,8,26,1,26,3,26,471,8,26,1,26,3,26,474,8,
        26,1,26,1,26,3,26,478,8,26,1,26,3,26,481,8,26,1,26,1,26,3,26,485,
        8,26,1,26,1,26,3,26,489,8,26,1,26,3,26,492,8,26,1,26,1,26,1,26,3,
        26,497,8,26,1,26,1,26,1,26,3,26,502,8,26,1,27,3,27,505,8,27,1,27,
        1,27,3,27,509,8,27,1,27,1,27,3,27,513,8,27,1,27,1,27,3,27,517,8,
        27,1,27,1,27,3,27,521,8,27,1,27,1,27,3,27,525,8,27,1,27,1,27,3,27,
        529,8,27,1,27,1,27,3,27,533,8,27,1,27,1,27,3,27,537,8,27,1,27,1,
        27,3,27,541,8,27,1,27,1,27,3,27,545,8,27,1,27,1,27,3,27,549,8,27,
        1,27,1,27,3,27,553,8,27,1,27,1,27,3,27,557,8,27,1,27,1,27,3,27,561,
        8,27,1,27,1,27,3,27,565,8,27,1,27,1,27,3,27,569,8,27,1,27,1,27,3,
        27,573,8,27,1,27,1,27,3,27,577,8,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,3,27,588,8,27,1,27,1,27,3,27,592,8,27,1,27,1,27,3,
        27,596,8,27,1,27,1,27,3,27,600,8,27,1,27,1,27,3,27,604,8,27,1,27,
        1,27,3,27,608,8,27,1,27,1,27,1,27,3,27,613,8,27,1,27,1,27,3,27,617,
        8,27,1,27,1,27,3,27,621,8,27,1,27,1,27,3,27,625,8,27,1,27,1,27,3,
        27,629,8,27,1,27,1,27,1,27,3,27,634,8,27,1,27,1,27,1,27,3,27,639,
        8,27,1,27,1,27,3,27,643,8,27,1,27,1,27,3,27,647,8,27,1,27,1,27,1,
        27,1,27,1,27,3,27,654,8,27,1,27,1,27,1,27,3,27,659,8,27,1,27,1,27,
        1,27,3,27,664,8,27,1,27,1,27,3,27,668,8,27,1,27,3,27,671,8,27,1,
        28,3,28,674,8,28,1,28,1,28,3,28,678,8,28,1,28,1,28,3,28,682,8,28,
        1,28,1,28,3,28,686,8,28,1,28,1,28,3,28,690,8,28,1,28,1,28,3,28,694,
        8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,704,8,28,1,28,
        1,28,1,28,1,28,1,28,1,28,3,28,712,8,28,1,28,1,28,3,28,716,8,28,1,
        28,1,28,1,28,1,28,1,28,3,28,723,8,28,1,28,1,28,1,28,3,28,728,8,28,
        1,28,1,28,1,28,1,28,1,28,1,28,3,28,736,8,28,1,28,1,28,3,28,740,8,
        28,1,28,1,28,3,28,744,8,28,1,28,3,28,747,8,28,1,28,1,28,1,28,3,28,
        752,8,28,1,28,3,28,755,8,28,1,28,1,28,3,28,759,8,28,1,28,3,28,762,
        8,28,1,28,1,28,1,28,3,28,767,8,28,1,28,1,28,3,28,771,8,28,1,28,1,
        28,3,28,775,8,28,1,28,1,28,3,28,779,8,28,1,28,1,28,1,28,1,28,1,28,
        1,28,3,28,787,8,28,1,28,1,28,3,28,791,8,28,1,28,1,28,1,28,3,28,796,
        8,28,1,28,1,28,1,28,1,28,3,28,802,8,28,1,28,3,28,805,8,28,1,28,1,
        28,3,28,809,8,28,1,28,3,28,812,8,28,1,28,1,28,1,28,1,28,3,28,818,
        8,28,1,28,3,28,821,8,28,1,28,1,28,3,28,825,8,28,1,28,3,28,828,8,
        28,1,28,1,28,3,28,832,8,28,1,28,3,28,835,8,28,1,28,1,28,1,28,3,28,
        840,8,28,1,28,3,28,843,8,28,1,28,1,28,3,28,847,8,28,1,28,1,28,1,
        28,1,28,3,28,853,8,28,1,29,1,29,1,30,1,30,3,30,859,8,30,1,30,1,30,
        1,30,3,30,864,8,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,3,30,876,8,30,1,31,3,31,879,8,31,1,31,1,31,3,31,883,8,31,1,
        31,1,31,3,31,887,8,31,1,31,1,31,3,31,891,8,31,1,31,1,31,3,31,895,
        8,31,1,31,1,31,3,31,899,8,31,1,31,1,31,3,31,903,8,31,1,31,1,31,3,
        31,907,8,31,1,31,1,31,3,31,911,8,31,1,31,1,31,3,31,915,8,31,1,31,
        1,31,3,31,919,8,31,1,31,1,31,3,31,923,8,31,1,31,1,31,3,31,927,8,
        31,1,31,1,31,3,31,931,8,31,1,31,1,31,3,31,935,8,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,948,8,31,1,31,1,31,
        3,31,952,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,962,8,
        31,1,31,1,31,1,31,3,31,967,8,31,1,31,0,0,32,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,0,3,2,0,122,122,192,192,1,0,190,191,7,0,5,5,9,9,11,11,14,14,18,
        18,21,24,28,28,1309,0,64,1,0,0,0,2,67,1,0,0,0,4,69,1,0,0,0,6,71,
        1,0,0,0,8,73,1,0,0,0,10,75,1,0,0,0,12,77,1,0,0,0,14,79,1,0,0,0,16,
        81,1,0,0,0,18,83,1,0,0,0,20,85,1,0,0,0,22,87,1,0,0,0,24,89,1,0,0,
        0,26,91,1,0,0,0,28,93,1,0,0,0,30,95,1,0,0,0,32,97,1,0,0,0,34,99,
        1,0,0,0,36,101,1,0,0,0,38,103,1,0,0,0,40,105,1,0,0,0,42,107,1,0,
        0,0,44,109,1,0,0,0,46,113,1,0,0,0,48,120,1,0,0,0,50,134,1,0,0,0,
        52,501,1,0,0,0,54,670,1,0,0,0,56,852,1,0,0,0,58,854,1,0,0,0,60,875,
        1,0,0,0,62,966,1,0,0,0,64,65,3,56,28,0,65,66,5,0,0,1,66,1,1,0,0,
        0,67,68,5,115,0,0,68,3,1,0,0,0,69,70,5,116,0,0,70,5,1,0,0,0,71,72,
        5,1,0,0,72,7,1,0,0,0,73,74,5,118,0,0,74,9,1,0,0,0,75,76,5,120,0,
        0,76,11,1,0,0,0,77,78,7,0,0,0,78,13,1,0,0,0,79,80,3,12,6,0,80,15,
        1,0,0,0,81,82,5,123,0,0,82,17,1,0,0,0,83,84,5,124,0,0,84,19,1,0,
        0,0,85,86,5,125,0,0,86,21,1,0,0,0,87,88,5,126,0,0,88,23,1,0,0,0,
        89,90,5,121,0,0,90,25,1,0,0,0,91,92,5,121,0,0,92,27,1,0,0,0,93,94,
        5,121,0,0,94,29,1,0,0,0,95,96,5,183,0,0,96,31,1,0,0,0,97,98,5,74,
        0,0,98,33,1,0,0,0,99,100,5,76,0,0,100,35,1,0,0,0,101,102,5,11,0,
        0,102,37,1,0,0,0,103,104,5,119,0,0,104,39,1,0,0,0,105,106,5,186,
        0,0,106,41,1,0,0,0,107,108,5,187,0,0,108,43,1,0,0,0,109,110,5,127,
        0,0,110,111,3,32,16,0,111,112,5,127,0,0,112,45,1,0,0,0,113,114,5,
        127,0,0,114,115,3,32,16,0,115,116,5,127,0,0,116,117,3,34,17,0,117,
        118,5,127,0,0,118,47,1,0,0,0,119,121,3,50,25,0,120,119,1,0,0,0,121,
        122,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,49,1,0,0,0,124,127,
        5,188,0,0,125,126,5,182,0,0,126,128,3,30,15,0,127,125,1,0,0,0,127,
        128,1,0,0,0,128,135,1,0,0,0,129,130,5,188,0,0,130,135,5,181,0,0,
        131,132,5,184,0,0,132,135,5,188,0,0,133,135,5,185,0,0,134,124,1,
        0,0,0,134,129,1,0,0,0,134,131,1,0,0,0,134,133,1,0,0,0,135,51,1,0,
        0,0,136,140,5,130,0,0,137,138,3,40,20,0,138,139,3,42,21,0,139,141,
        1,0,0,0,140,137,1,0,0,0,140,141,1,0,0,0,141,502,1,0,0,0,142,144,
        3,2,1,0,143,142,1,0,0,0,143,144,1,0,0,0,144,145,1,0,0,0,145,147,
        5,131,0,0,146,148,5,128,0,0,147,146,1,0,0,0,147,148,1,0,0,0,148,
        502,1,0,0,0,149,502,5,132,0,0,150,152,3,4,2,0,151,150,1,0,0,0,151,
        152,1,0,0,0,152,153,1,0,0,0,153,155,5,133,0,0,154,156,5,128,0,0,
        155,154,1,0,0,0,155,156,1,0,0,0,156,157,1,0,0,0,157,502,3,8,4,0,
        158,160,5,134,0,0,159,161,5,128,0,0,160,159,1,0,0,0,160,161,1,0,
        0,0,161,162,1,0,0,0,162,502,3,14,7,0,163,165,3,4,2,0,164,163,1,0,
        0,0,164,165,1,0,0,0,165,166,1,0,0,0,166,167,5,135,0,0,167,169,3,
        2,1,0,168,170,3,38,19,0,169,168,1,0,0,0,169,170,1,0,0,0,170,502,
        1,0,0,0,171,173,3,4,2,0,172,171,1,0,0,0,172,173,1,0,0,0,173,174,
        1,0,0,0,174,176,5,136,0,0,175,177,3,10,5,0,176,175,1,0,0,0,176,177,
        1,0,0,0,177,179,1,0,0,0,178,180,3,8,4,0,179,178,1,0,0,0,179,180,
        1,0,0,0,180,182,1,0,0,0,181,183,3,38,19,0,182,181,1,0,0,0,182,183,
        1,0,0,0,183,502,1,0,0,0,184,186,5,137,0,0,185,187,5,128,0,0,186,
        185,1,0,0,0,186,187,1,0,0,0,187,190,1,0,0,0,188,189,5,117,0,0,189,
        191,3,52,26,0,190,188,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,
        194,3,12,6,0,193,192,1,0,0,0,193,194,1,0,0,0,194,502,1,0,0,0,195,
        197,5,138,0,0,196,198,3,12,6,0,197,196,1,0,0,0,197,198,1,0,0,0,198,
        502,1,0,0,0,199,201,3,4,2,0,200,199,1,0,0,0,200,201,1,0,0,0,201,
        202,1,0,0,0,202,203,5,172,0,0,203,502,3,44,22,0,204,206,3,2,1,0,
        205,204,1,0,0,0,205,206,1,0,0,0,206,207,1,0,0,0,207,209,5,139,0,
        0,208,210,5,128,0,0,209,208,1,0,0,0,209,210,1,0,0,0,210,502,1,0,
        0,0,211,213,3,4,2,0,212,211,1,0,0,0,212,213,1,0,0,0,213,214,1,0,
        0,0,214,216,5,140,0,0,215,217,5,128,0,0,216,215,1,0,0,0,216,217,
        1,0,0,0,217,219,1,0,0,0,218,220,3,8,4,0,219,218,1,0,0,0,219,220,
        1,0,0,0,220,222,1,0,0,0,221,223,3,38,19,0,222,221,1,0,0,0,222,223,
        1,0,0,0,223,502,1,0,0,0,224,226,3,4,2,0,225,224,1,0,0,0,225,226,
        1,0,0,0,226,227,1,0,0,0,227,229,5,141,0,0,228,230,3,8,4,0,229,228,
        1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,233,3,38,19,0,232,231,
        1,0,0,0,232,233,1,0,0,0,233,502,1,0,0,0,234,236,5,142,0,0,235,237,
        5,128,0,0,236,235,1,0,0,0,236,237,1,0,0,0,237,241,1,0,0,0,238,239,
        3,40,20,0,239,240,3,42,21,0,240,242,1,0,0,0,241,238,1,0,0,0,241,
        242,1,0,0,0,242,502,1,0,0,0,243,245,3,2,1,0,244,243,1,0,0,0,244,
        245,1,0,0,0,245,246,1,0,0,0,246,247,5,143,0,0,247,502,3,24,12,0,
        248,250,3,4,2,0,249,248,1,0,0,0,249,250,1,0,0,0,250,251,1,0,0,0,
        251,252,5,144,0,0,252,254,3,2,1,0,253,255,3,38,19,0,254,253,1,0,
        0,0,254,255,1,0,0,0,255,502,1,0,0,0,256,258,5,145,0,0,257,259,5,
        128,0,0,258,257,1,0,0,0,258,259,1,0,0,0,259,502,1,0,0,0,260,262,
        3,4,2,0,261,260,1,0,0,0,261,262,1,0,0,0,262,263,1,0,0,0,263,265,
        5,146,0,0,264,266,3,8,4,0,265,264,1,0,0,0,265,266,1,0,0,0,266,268,
        1,0,0,0,267,269,3,38,19,0,268,267,1,0,0,0,268,269,1,0,0,0,269,502,
        1,0,0,0,270,272,3,2,1,0,271,270,1,0,0,0,271,272,1,0,0,0,272,273,
        1,0,0,0,273,274,5,147,0,0,274,276,3,44,22,0,275,277,3,38,19,0,276,
        275,1,0,0,0,276,277,1,0,0,0,277,502,1,0,0,0,278,502,5,148,0,0,279,
        281,3,4,2,0,280,279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,
        284,5,149,0,0,283,285,3,8,4,0,284,283,1,0,0,0,284,285,1,0,0,0,285,
        287,1,0,0,0,286,288,3,38,19,0,287,286,1,0,0,0,287,288,1,0,0,0,288,
        502,1,0,0,0,289,291,3,2,1,0,290,289,1,0,0,0,290,291,1,0,0,0,291,
        292,1,0,0,0,292,294,5,150,0,0,293,295,3,10,5,0,294,293,1,0,0,0,294,
        295,1,0,0,0,295,502,1,0,0,0,296,298,5,152,0,0,297,299,5,128,0,0,
        298,297,1,0,0,0,298,299,1,0,0,0,299,502,1,0,0,0,300,302,3,2,1,0,
        301,300,1,0,0,0,301,302,1,0,0,0,302,303,1,0,0,0,303,305,5,153,0,
        0,304,306,5,128,0,0,305,304,1,0,0,0,305,306,1,0,0,0,306,308,1,0,
        0,0,307,309,3,12,6,0,308,307,1,0,0,0,308,309,1,0,0,0,309,502,1,0,
        0,0,310,312,5,154,0,0,311,313,5,128,0,0,312,311,1,0,0,0,312,313,
        1,0,0,0,313,314,1,0,0,0,314,502,3,12,6,0,315,317,5,155,0,0,316,318,
        5,128,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,502,1,0,0,0,319,321,
        5,156,0,0,320,322,3,48,24,0,321,320,1,0,0,0,321,322,1,0,0,0,322,
        323,1,0,0,0,323,502,7,1,0,0,324,502,5,157,0,0,325,326,5,158,0,0,
        326,502,3,12,6,0,327,329,3,4,2,0,328,327,1,0,0,0,328,329,1,0,0,0,
        329,330,1,0,0,0,330,331,5,159,0,0,331,333,3,46,23,0,332,334,3,20,
        10,0,333,332,1,0,0,0,333,334,1,0,0,0,334,336,1,0,0,0,335,337,3,8,
        4,0,336,335,1,0,0,0,336,337,1,0,0,0,337,339,1,0,0,0,338,340,3,38,
        19,0,339,338,1,0,0,0,339,340,1,0,0,0,340,502,1,0,0,0,341,343,3,4,
        2,0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,346,5,160,
        0,0,345,347,3,20,10,0,346,345,1,0,0,0,346,347,1,0,0,0,347,349,1,
        0,0,0,348,350,3,8,4,0,349,348,1,0,0,0,349,350,1,0,0,0,350,352,1,
        0,0,0,351,353,3,38,19,0,352,351,1,0,0,0,352,353,1,0,0,0,353,502,
        1,0,0,0,354,356,3,4,2,0,355,354,1,0,0,0,355,356,1,0,0,0,356,357,
        1,0,0,0,357,359,5,161,0,0,358,360,3,20,10,0,359,358,1,0,0,0,359,
        360,1,0,0,0,360,362,1,0,0,0,361,363,3,8,4,0,362,361,1,0,0,0,362,
        363,1,0,0,0,363,365,1,0,0,0,364,366,3,38,19,0,365,364,1,0,0,0,365,
        366,1,0,0,0,366,502,1,0,0,0,367,369,5,162,0,0,368,370,5,128,0,0,
        369,368,1,0,0,0,369,370,1,0,0,0,370,502,1,0,0,0,371,373,5,163,0,
        0,372,374,5,128,0,0,373,372,1,0,0,0,373,374,1,0,0,0,374,375,1,0,
        0,0,375,502,3,28,14,0,376,377,5,164,0,0,377,502,3,40,20,0,378,502,
        5,165,0,0,379,381,5,166,0,0,380,382,5,128,0,0,381,380,1,0,0,0,381,
        382,1,0,0,0,382,383,1,0,0,0,383,502,3,40,20,0,384,502,5,167,0,0,
        385,387,3,2,1,0,386,385,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,
        388,390,5,168,0,0,389,391,3,18,9,0,390,389,1,0,0,0,390,391,1,0,0,
        0,391,393,1,0,0,0,392,394,3,8,4,0,393,392,1,0,0,0,393,394,1,0,0,
        0,394,396,1,0,0,0,395,397,3,38,19,0,396,395,1,0,0,0,396,397,1,0,
        0,0,397,502,1,0,0,0,398,400,3,4,2,0,399,398,1,0,0,0,399,400,1,0,
        0,0,400,401,1,0,0,0,401,403,5,169,0,0,402,404,5,128,0,0,403,402,
        1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,407,5,98,0,0,406,405,
        1,0,0,0,406,407,1,0,0,0,407,409,1,0,0,0,408,410,3,12,6,0,409,408,
        1,0,0,0,409,410,1,0,0,0,410,502,1,0,0,0,411,413,3,4,2,0,412,411,
        1,0,0,0,412,413,1,0,0,0,413,414,1,0,0,0,414,416,5,170,0,0,415,417,
        5,128,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,420,
        5,98,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,423,
        3,12,6,0,422,421,1,0,0,0,422,423,1,0,0,0,423,502,1,0,0,0,424,426,
        3,4,2,0,425,424,1,0,0,0,425,426,1,0,0,0,426,427,1,0,0,0,427,429,
        5,171,0,0,428,430,5,128,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,
        432,1,0,0,0,431,433,3,12,6,0,432,431,1,0,0,0,432,433,1,0,0,0,433,
        502,1,0,0,0,434,436,3,4,2,0,435,434,1,0,0,0,435,436,1,0,0,0,436,
        437,1,0,0,0,437,439,5,173,0,0,438,440,3,10,5,0,439,438,1,0,0,0,439,
        440,1,0,0,0,440,442,1,0,0,0,441,443,3,8,4,0,442,441,1,0,0,0,442,
        443,1,0,0,0,443,502,1,0,0,0,444,446,3,2,1,0,445,444,1,0,0,0,445,
        446,1,0,0,0,446,447,1,0,0,0,447,449,5,174,0,0,448,450,3,22,11,0,
        449,448,1,0,0,0,449,450,1,0,0,0,450,452,1,0,0,0,451,453,3,8,4,0,
        452,451,1,0,0,0,452,453,1,0,0,0,453,455,1,0,0,0,454,456,3,38,19,
        0,455,454,1,0,0,0,455,456,1,0,0,0,456,502,1,0,0,0,457,459,3,2,1,
        0,458,457,1,0,0,0,458,459,1,0,0,0,459,460,1,0,0,0,460,461,5,128,
        0,0,461,502,3,16,8,0,462,464,3,4,2,0,463,462,1,0,0,0,463,464,1,0,
        0,0,464,465,1,0,0,0,465,467,5,175,0,0,466,468,3,8,4,0,467,466,1,
        0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,471,3,38,19,0,470,469,
        1,0,0,0,470,471,1,0,0,0,471,502,1,0,0,0,472,474,3,4,2,0,473,472,
        1,0,0,0,473,474,1,0,0,0,474,475,1,0,0,0,475,477,5,176,0,0,476,478,
        3,8,4,0,477,476,1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,481,
        3,38,19,0,480,479,1,0,0,0,480,481,1,0,0,0,481,502,1,0,0,0,482,502,
        5,5,0,0,483,485,3,2,1,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,
        1,0,0,0,486,488,5,177,0,0,487,489,3,38,19,0,488,487,1,0,0,0,488,
        489,1,0,0,0,489,502,1,0,0,0,490,492,3,4,2,0,491,490,1,0,0,0,491,
        492,1,0,0,0,492,493,1,0,0,0,493,494,5,178,0,0,494,496,3,10,5,0,495,
        497,3,4,2,0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,
        499,5,179,0,0,499,500,3,10,5,0,500,502,1,0,0,0,501,136,1,0,0,0,501,
        143,1,0,0,0,501,149,1,0,0,0,501,151,1,0,0,0,501,158,1,0,0,0,501,
        164,1,0,0,0,501,172,1,0,0,0,501,184,1,0,0,0,501,195,1,0,0,0,501,
        200,1,0,0,0,501,205,1,0,0,0,501,212,1,0,0,0,501,225,1,0,0,0,501,
        234,1,0,0,0,501,244,1,0,0,0,501,249,1,0,0,0,501,256,1,0,0,0,501,
        261,1,0,0,0,501,271,1,0,0,0,501,278,1,0,0,0,501,280,1,0,0,0,501,
        290,1,0,0,0,501,296,1,0,0,0,501,301,1,0,0,0,501,310,1,0,0,0,501,
        315,1,0,0,0,501,319,1,0,0,0,501,324,1,0,0,0,501,325,1,0,0,0,501,
        328,1,0,0,0,501,342,1,0,0,0,501,355,1,0,0,0,501,367,1,0,0,0,501,
        371,1,0,0,0,501,376,1,0,0,0,501,378,1,0,0,0,501,379,1,0,0,0,501,
        384,1,0,0,0,501,386,1,0,0,0,501,399,1,0,0,0,501,412,1,0,0,0,501,
        425,1,0,0,0,501,435,1,0,0,0,501,445,1,0,0,0,501,458,1,0,0,0,501,
        463,1,0,0,0,501,473,1,0,0,0,501,482,1,0,0,0,501,484,1,0,0,0,501,
        491,1,0,0,0,502,53,1,0,0,0,503,505,3,6,3,0,504,503,1,0,0,0,504,505,
        1,0,0,0,505,506,1,0,0,0,506,671,5,9,0,0,507,509,3,6,3,0,508,507,
        1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,671,5,66,0,0,511,513,
        3,6,3,0,512,511,1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,671,
        5,11,0,0,515,517,3,6,3,0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,
        1,0,0,0,518,671,5,14,0,0,519,521,3,6,3,0,520,519,1,0,0,0,520,521,
        1,0,0,0,521,522,1,0,0,0,522,671,5,15,0,0,523,525,3,6,3,0,524,523,
        1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,671,5,68,0,0,527,529,
        3,6,3,0,528,527,1,0,0,0,528,529,1,0,0,0,529,530,1,0,0,0,530,671,
        5,95,0,0,531,533,3,6,3,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,
        1,0,0,0,534,671,5,110,0,0,535,537,3,6,3,0,536,535,1,0,0,0,536,537,
        1,0,0,0,537,538,1,0,0,0,538,671,5,70,0,0,539,541,3,6,3,0,540,539,
        1,0,0,0,540,541,1,0,0,0,541,542,1,0,0,0,542,671,5,17,0,0,543,545,
        3,6,3,0,544,543,1,0,0,0,544,545,1,0,0,0,545,546,1,0,0,0,546,671,
        5,69,0,0,547,549,3,6,3,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,
        1,0,0,0,550,671,5,96,0,0,551,553,3,6,3,0,552,551,1,0,0,0,552,553,
        1,0,0,0,553,554,1,0,0,0,554,671,5,111,0,0,555,557,3,6,3,0,556,555,
        1,0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,671,5,112,0,0,559,561,
        3,6,3,0,560,559,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,671,
        5,113,0,0,563,565,3,6,3,0,564,563,1,0,0,0,564,565,1,0,0,0,565,566,
        1,0,0,0,566,671,5,114,0,0,567,569,3,6,3,0,568,567,1,0,0,0,568,569,
        1,0,0,0,569,570,1,0,0,0,570,671,5,101,0,0,571,573,3,6,3,0,572,571,
        1,0,0,0,572,573,1,0,0,0,573,574,1,0,0,0,574,671,5,102,0,0,575,577,
        3,6,3,0,576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,671,
        5,99,0,0,579,671,5,100,0,0,580,671,5,103,0,0,581,582,5,104,0,0,582,
        671,3,24,12,0,583,584,5,105,0,0,584,671,3,24,12,0,585,671,5,94,0,
        0,586,588,3,6,3,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,
        0,589,671,5,93,0,0,590,592,3,6,3,0,591,590,1,0,0,0,591,592,1,0,0,
        0,592,593,1,0,0,0,593,671,5,92,0,0,594,596,3,6,3,0,595,594,1,0,0,
        0,595,596,1,0,0,0,596,597,1,0,0,0,597,671,5,106,0,0,598,600,3,6,
        3,0,599,598,1,0,0,0,599,600,1,0,0,0,600,601,1,0,0,0,601,671,5,86,
        0,0,602,604,3,6,3,0,603,602,1,0,0,0,603,604,1,0,0,0,604,605,1,0,
        0,0,605,671,5,87,0,0,606,608,3,6,3,0,607,606,1,0,0,0,607,608,1,0,
        0,0,608,609,1,0,0,0,609,671,5,88,0,0,610,671,5,109,0,0,611,613,3,
        6,3,0,612,611,1,0,0,0,612,613,1,0,0,0,613,614,1,0,0,0,614,671,5,
        60,0,0,615,617,3,6,3,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,1,
        0,0,0,618,671,5,34,0,0,619,621,3,6,3,0,620,619,1,0,0,0,620,621,1,
        0,0,0,621,622,1,0,0,0,622,671,5,63,0,0,623,625,3,6,3,0,624,623,1,
        0,0,0,624,625,1,0,0,0,625,626,1,0,0,0,626,671,5,37,0,0,627,629,3,
        6,3,0,628,627,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,631,5,
        64,0,0,631,671,3,24,12,0,632,634,3,6,3,0,633,632,1,0,0,0,633,634,
        1,0,0,0,634,635,1,0,0,0,635,636,5,38,0,0,636,671,3,24,12,0,637,639,
        3,6,3,0,638,637,1,0,0,0,638,639,1,0,0,0,639,640,1,0,0,0,640,671,
        5,39,0,0,641,643,3,6,3,0,642,641,1,0,0,0,642,643,1,0,0,0,643,644,
        1,0,0,0,644,671,5,40,0,0,645,647,3,6,3,0,646,645,1,0,0,0,646,647,
        1,0,0,0,647,648,1,0,0,0,648,671,5,44,0,0,649,671,5,45,0,0,650,671,
        5,72,0,0,651,671,5,46,0,0,652,654,3,6,3,0,653,652,1,0,0,0,653,654,
        1,0,0,0,654,655,1,0,0,0,655,656,5,78,0,0,656,671,3,24,12,0,657,659,
        3,6,3,0,658,657,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,661,
        5,52,0,0,661,671,3,24,12,0,662,664,3,6,3,0,663,662,1,0,0,0,663,664,
        1,0,0,0,664,665,1,0,0,0,665,671,5,81,0,0,666,668,3,6,3,0,667,666,
        1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,671,5,55,0,0,670,504,
        1,0,0,0,670,508,1,0,0,0,670,512,1,0,0,0,670,516,1,0,0,0,670,520,
        1,0,0,0,670,524,1,0,0,0,670,528,1,0,0,0,670,532,1,0,0,0,670,536,
        1,0,0,0,670,540,1,0,0,0,670,544,1,0,0,0,670,548,1,0,0,0,670,552,
        1,0,0,0,670,556,1,0,0,0,670,560,1,0,0,0,670,564,1,0,0,0,670,568,
        1,0,0,0,670,572,1,0,0,0,670,576,1,0,0,0,670,579,1,0,0,0,670,580,
        1,0,0,0,670,581,1,0,0,0,670,583,1,0,0,0,670,585,1,0,0,0,670,587,
        1,0,0,0,670,591,1,0,0,0,670,595,1,0,0,0,670,599,1,0,0,0,670,603,
        1,0,0,0,670,607,1,0,0,0,670,610,1,0,0,0,670,612,1,0,0,0,670,616,
        1,0,0,0,670,620,1,0,0,0,670,624,1,0,0,0,670,628,1,0,0,0,670,633,
        1,0,0,0,670,638,1,0,0,0,670,642,1,0,0,0,670,646,1,0,0,0,670,649,
        1,0,0,0,670,650,1,0,0,0,670,651,1,0,0,0,670,653,1,0,0,0,670,658,
        1,0,0,0,670,663,1,0,0,0,670,667,1,0,0,0,671,55,1,0,0,0,672,674,3,
        6,3,0,673,672,1,0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,853,5,
        22,0,0,676,678,3,6,3,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,
        0,0,0,679,853,5,5,0,0,680,682,3,6,3,0,681,680,1,0,0,0,681,682,1,
        0,0,0,682,683,1,0,0,0,683,853,5,26,0,0,684,686,3,6,3,0,685,684,1,
        0,0,0,685,686,1,0,0,0,686,687,1,0,0,0,687,853,5,6,0,0,688,690,3,
        6,3,0,689,688,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,853,5,
        3,0,0,692,694,3,6,3,0,693,692,1,0,0,0,693,694,1,0,0,0,694,695,1,
        0,0,0,695,853,5,7,0,0,696,853,5,8,0,0,697,853,5,13,0,0,698,853,5,
        19,0,0,699,853,5,31,0,0,700,853,5,28,0,0,701,853,5,30,0,0,702,704,
        3,6,3,0,703,702,1,0,0,0,703,704,1,0,0,0,704,705,1,0,0,0,705,706,
        5,107,0,0,706,707,3,54,27,0,707,708,3,16,8,0,708,709,3,36,18,0,709,
        853,1,0,0,0,710,712,3,6,3,0,711,710,1,0,0,0,711,712,1,0,0,0,712,
        713,1,0,0,0,713,853,5,89,0,0,714,716,3,6,3,0,715,714,1,0,0,0,715,
        716,1,0,0,0,716,717,1,0,0,0,717,718,5,108,0,0,718,719,3,52,26,0,
        719,720,5,180,0,0,720,853,1,0,0,0,721,723,3,6,3,0,722,721,1,0,0,
        0,722,723,1,0,0,0,723,724,1,0,0,0,724,725,5,97,0,0,725,853,3,54,
        27,0,726,728,3,6,3,0,727,726,1,0,0,0,727,728,1,0,0,0,728,729,1,0,
        0,0,729,730,5,98,0,0,730,853,3,54,27,0,731,732,5,178,0,0,732,853,
        3,10,5,0,733,853,5,161,0,0,734,736,3,6,3,0,735,734,1,0,0,0,735,736,
        1,0,0,0,736,737,1,0,0,0,737,853,5,59,0,0,738,740,3,6,3,0,739,738,
        1,0,0,0,739,740,1,0,0,0,740,741,1,0,0,0,741,853,5,33,0,0,742,744,
        3,10,5,0,743,742,1,0,0,0,743,744,1,0,0,0,744,746,1,0,0,0,745,747,
        3,6,3,0,746,745,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,749,
        5,61,0,0,749,853,3,54,27,0,750,752,3,10,5,0,751,750,1,0,0,0,751,
        752,1,0,0,0,752,754,1,0,0,0,753,755,3,6,3,0,754,753,1,0,0,0,754,
        755,1,0,0,0,755,756,1,0,0,0,756,853,5,35,0,0,757,759,3,10,5,0,758,
        757,1,0,0,0,758,759,1,0,0,0,759,761,1,0,0,0,760,762,3,6,3,0,761,
        760,1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,764,5,62,0,0,764,
        853,3,54,27,0,765,767,3,10,5,0,766,765,1,0,0,0,766,767,1,0,0,0,767,
        768,1,0,0,0,768,853,5,36,0,0,769,771,3,6,3,0,770,769,1,0,0,0,770,
        771,1,0,0,0,771,772,1,0,0,0,772,853,5,67,0,0,773,775,3,6,3,0,774,
        773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,853,5,41,0,0,777,
        779,3,6,3,0,778,777,1,0,0,0,778,779,1,0,0,0,779,780,1,0,0,0,780,
        853,5,42,0,0,781,782,5,71,0,0,782,853,3,26,13,0,783,853,5,73,0,0,
        784,853,5,47,0,0,785,787,3,10,5,0,786,785,1,0,0,0,786,787,1,0,0,
        0,787,788,1,0,0,0,788,853,5,74,0,0,789,791,3,10,5,0,790,789,1,0,
        0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,853,5,48,0,0,793,853,5,49,
        0,0,794,796,3,6,3,0,795,794,1,0,0,0,795,796,1,0,0,0,796,797,1,0,
        0,0,797,798,5,76,0,0,798,853,3,24,12,0,799,853,5,50,0,0,800,802,
        3,10,5,0,801,800,1,0,0,0,801,802,1,0,0,0,802,804,1,0,0,0,803,805,
        3,6,3,0,804,803,1,0,0,0,804,805,1,0,0,0,805,806,1,0,0,0,806,853,
        5,77,0,0,807,809,3,10,5,0,808,807,1,0,0,0,808,809,1,0,0,0,809,811,
        1,0,0,0,810,812,3,6,3,0,811,810,1,0,0,0,811,812,1,0,0,0,812,813,
        1,0,0,0,813,853,5,51,0,0,814,853,5,79,0,0,815,853,5,53,0,0,816,818,
        3,10,5,0,817,816,1,0,0,0,817,818,1,0,0,0,818,820,1,0,0,0,819,821,
        3,6,3,0,820,819,1,0,0,0,820,821,1,0,0,0,821,822,1,0,0,0,822,853,
        5,82,0,0,823,825,3,10,5,0,824,823,1,0,0,0,824,825,1,0,0,0,825,827,
        1,0,0,0,826,828,3,6,3,0,827,826,1,0,0,0,827,828,1,0,0,0,828,829,
        1,0,0,0,829,853,5,56,0,0,830,832,3,10,5,0,831,830,1,0,0,0,831,832,
        1,0,0,0,832,834,1,0,0,0,833,835,3,6,3,0,834,833,1,0,0,0,834,835,
        1,0,0,0,835,836,1,0,0,0,836,837,5,83,0,0,837,853,3,54,27,0,838,840,
        3,10,5,0,839,838,1,0,0,0,839,840,1,0,0,0,840,842,1,0,0,0,841,843,
        3,6,3,0,842,841,1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,853,
        5,57,0,0,845,847,3,6,3,0,846,845,1,0,0,0,846,847,1,0,0,0,847,848,
        1,0,0,0,848,853,5,84,0,0,849,850,5,58,0,0,850,853,5,58,0,0,851,853,
        3,54,27,0,852,673,1,0,0,0,852,677,1,0,0,0,852,681,1,0,0,0,852,685,
        1,0,0,0,852,689,1,0,0,0,852,693,1,0,0,0,852,696,1,0,0,0,852,697,
        1,0,0,0,852,698,1,0,0,0,852,699,1,0,0,0,852,700,1,0,0,0,852,701,
        1,0,0,0,852,703,1,0,0,0,852,711,1,0,0,0,852,715,1,0,0,0,852,722,
        1,0,0,0,852,727,1,0,0,0,852,731,1,0,0,0,852,733,1,0,0,0,852,735,
        1,0,0,0,852,739,1,0,0,0,852,743,1,0,0,0,852,751,1,0,0,0,852,758,
        1,0,0,0,852,766,1,0,0,0,852,770,1,0,0,0,852,774,1,0,0,0,852,778,
        1,0,0,0,852,781,1,0,0,0,852,783,1,0,0,0,852,784,1,0,0,0,852,786,
        1,0,0,0,852,790,1,0,0,0,852,793,1,0,0,0,852,795,1,0,0,0,852,799,
        1,0,0,0,852,801,1,0,0,0,852,808,1,0,0,0,852,814,1,0,0,0,852,815,
        1,0,0,0,852,817,1,0,0,0,852,824,1,0,0,0,852,831,1,0,0,0,852,839,
        1,0,0,0,852,846,1,0,0,0,852,849,1,0,0,0,852,851,1,0,0,0,853,57,1,
        0,0,0,854,855,7,2,0,0,855,59,1,0,0,0,856,858,5,86,0,0,857,859,5,
        128,0,0,858,857,1,0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,876,
        3,32,16,0,861,863,5,109,0,0,862,864,5,128,0,0,863,862,1,0,0,0,863,
        864,1,0,0,0,864,865,1,0,0,0,865,876,3,32,16,0,866,867,5,108,0,0,
        867,876,5,145,0,0,868,869,5,108,0,0,869,876,5,151,0,0,870,871,5,
        108,0,0,871,876,5,75,0,0,872,873,5,108,0,0,873,874,5,163,0,0,874,
        876,3,28,14,0,875,856,1,0,0,0,875,861,1,0,0,0,875,866,1,0,0,0,875,
        868,1,0,0,0,875,870,1,0,0,0,875,872,1,0,0,0,876,61,1,0,0,0,877,879,
        3,6,3,0,878,877,1,0,0,0,878,879,1,0,0,0,879,880,1,0,0,0,880,967,
        5,110,0,0,881,883,3,6,3,0,882,881,1,0,0,0,882,883,1,0,0,0,883,884,
        1,0,0,0,884,967,5,64,0,0,885,887,3,6,3,0,886,885,1,0,0,0,886,887,
        1,0,0,0,887,888,1,0,0,0,888,967,5,7,0,0,889,891,3,6,3,0,890,889,
        1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,892,967,5,60,0,0,893,895,
        3,6,3,0,894,893,1,0,0,0,894,895,1,0,0,0,895,896,1,0,0,0,896,967,
        5,3,0,0,897,899,3,6,3,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,
        1,0,0,0,900,967,5,68,0,0,901,903,3,6,3,0,902,901,1,0,0,0,902,903,
        1,0,0,0,903,904,1,0,0,0,904,967,5,11,0,0,905,907,3,6,3,0,906,905,
        1,0,0,0,906,907,1,0,0,0,907,908,1,0,0,0,908,967,5,69,0,0,909,911,
        3,6,3,0,910,909,1,0,0,0,910,911,1,0,0,0,911,912,1,0,0,0,912,967,
        5,62,0,0,913,915,3,6,3,0,914,913,1,0,0,0,914,915,1,0,0,0,915,916,
        1,0,0,0,916,967,5,5,0,0,917,919,3,6,3,0,918,917,1,0,0,0,918,919,
        1,0,0,0,919,920,1,0,0,0,920,967,5,79,0,0,921,923,3,6,3,0,922,921,
        1,0,0,0,922,923,1,0,0,0,923,924,1,0,0,0,924,967,5,22,0,0,925,927,
        3,6,3,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,0,0,0,928,967,
        5,77,0,0,929,931,3,6,3,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,
        1,0,0,0,932,967,5,65,0,0,933,935,3,6,3,0,934,933,1,0,0,0,934,935,
        1,0,0,0,935,936,1,0,0,0,936,967,5,39,0,0,937,967,5,76,0,0,938,967,
        5,13,0,0,939,967,5,50,0,0,940,941,5,71,0,0,941,967,3,26,13,0,942,
        943,5,104,0,0,943,967,3,26,13,0,944,945,5,104,0,0,945,967,5,104,
        0,0,946,948,3,6,3,0,947,946,1,0,0,0,947,948,1,0,0,0,948,949,1,0,
        0,0,949,967,5,72,0,0,950,952,3,6,3,0,951,950,1,0,0,0,951,952,1,0,
        0,0,952,953,1,0,0,0,953,967,5,46,0,0,954,967,5,80,0,0,955,967,5,
        91,0,0,956,967,5,8,0,0,957,967,5,75,0,0,958,959,5,58,0,0,959,967,
        5,58,0,0,960,962,3,6,3,0,961,960,1,0,0,0,961,962,1,0,0,0,962,963,
        1,0,0,0,963,964,3,60,30,0,964,965,3,36,18,0,965,967,1,0,0,0,966,
        878,1,0,0,0,966,882,1,0,0,0,966,886,1,0,0,0,966,890,1,0,0,0,966,
        894,1,0,0,0,966,898,1,0,0,0,966,902,1,0,0,0,966,906,1,0,0,0,966,
        910,1,0,0,0,966,914,1,0,0,0,966,918,1,0,0,0,966,922,1,0,0,0,966,
        926,1,0,0,0,966,930,1,0,0,0,966,934,1,0,0,0,966,937,1,0,0,0,966,
        938,1,0,0,0,966,939,1,0,0,0,966,940,1,0,0,0,966,942,1,0,0,0,966,
        944,1,0,0,0,966,947,1,0,0,0,966,951,1,0,0,0,966,954,1,0,0,0,966,
        955,1,0,0,0,966,956,1,0,0,0,966,957,1,0,0,0,966,958,1,0,0,0,966,
        961,1,0,0,0,967,63,1,0,0,0,202,122,127,134,140,143,147,151,155,160,
        164,169,172,176,179,182,186,190,193,197,200,205,209,212,216,219,
        222,225,229,232,236,241,244,249,254,258,261,265,268,271,276,280,
        284,287,290,294,298,301,305,308,312,317,321,328,333,336,339,342,
        346,349,352,355,359,362,365,369,373,381,386,390,393,396,399,403,
        406,409,412,416,419,422,425,429,432,435,439,442,445,449,452,455,
        458,463,467,470,473,477,480,484,488,491,496,501,504,508,512,516,
        520,524,528,532,536,540,544,548,552,556,560,564,568,572,576,587,
        591,595,599,603,607,612,616,620,624,628,633,638,642,646,653,658,
        663,667,670,673,677,681,685,689,693,703,711,715,722,727,735,739,
        743,746,751,754,758,761,766,770,774,778,786,790,795,801,804,808,
        811,817,820,824,827,831,834,839,842,846,852,858,863,875,878,882,
        886,890,894,898,902,906,910,914,918,922,926,930,934,947,951,961,
        966
    ]

class CommandParser ( Parser ):

    grammarFileName = "CommandParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'\\u0001'", "'\\u0002'", 
                     "'\\u0003'", "'\\u0004'", "'\\u0005'", "'\\u0006'", 
                     "'\\u0007'", "'\\u0008'", "'\\u0009'", "<INVALID>", 
                     "'\\u000B'", "'\\u000C'", "'\\r'", "'\\u000E'", "'\\u000F'", 
                     "'\\u0010'", "'\\u0011'", "'\\u0012'", "'\\u0013'", 
                     "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", 
                     "'\\u0018'", "'\\u0019'", "'\\u001A'", "'\\u001B'", 
                     "'\\u001C'", "'\\u001D'", "'\\u001E'", "'\\u001F'", 
                     "'A'", "'B'", "'C'", "'D'", "'E'", "'F'", "'G'", "'H'", 
                     "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", "'O'", "'P'", 
                     "'Q'", "'R'", "'S'", "'T'", "'U'", "'V'", "'W'", "'X'", 
                     "'Y'", "'Z'", "'a'", "'b'", "'c'", "'d'", "'e'", "'f'", 
                     "'g'", "'h'", "'i'", "'j'", "'k'", "'l'", "'m'", "'n'", 
                     "'o'", "'p'", "'q'", "'r'", "'s'", "'t'", "'u'", "'v'", 
                     "'w'", "'x'", "'y'", "<INVALID>", "'\\'", "<INVALID>", 
                     "'0'", "';'", "'.'", "'~'", "<INVALID>", "'|'", "'_'", 
                     "'^'", "<INVALID>", "'-'", "<INVALID>", "<INVALID>", 
                     "'$'", "'%'", "'[['", "']]'", "<INVALID>", "<INVALID>", 
                     "'`'", "','", "<INVALID>", "':'", "<INVALID>", "<INVALID>", 
                     "'('", "')'", "'{'", "'}'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'UNNAMED'", 
                     "<INVALID>", "<INVALID>", "'echo'", "'visType'", "'subOpt'", 
                     "'winType'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'map'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'\\u02DC'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'wq'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'@'", "'*'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'no'", "'all'", 
                     "'LHS'", "'RHS'" ]

    symbolicNames = [ "<INVALID>", "Count", "ControlA", "ControlB", "ControlC", 
                      "ControlD", "ControlE", "ControlF", "ControlG", "ControlH", 
                      "ControlI", "ControlJ", "ControlK", "ControlL", "ControlM", 
                      "ControlN", "ControlO", "ControlP", "ControlQ", "ControlR", 
                      "ControlS", "ControlT", "ControlU", "ControlV", "ControlW", 
                      "ControlX", "ControlY", "ControlZ", "ControlLBrack", 
                      "ControlBSlash", "ControlRBrack", "ControlPow", "ControlLow", 
                      "UpperA", "UpperB", "UpperC", "UpperD", "UpperE", 
                      "UpperF", "UpperG", "UpperH", "UpperI", "UpperJ", 
                      "UpperK", "UpperL", "UpperM", "UpperN", "UpperO", 
                      "UpperP", "UpperQ", "UpperR", "UpperS", "UpperT", 
                      "UpperU", "UpperV", "UpperW", "UpperX", "UpperY", 
                      "UpperZ", "LowerA", "LowerB", "LowerC", "LowerD", 
                      "LowerE", "LowerF", "LowerG", "LowerH", "LowerI", 
                      "LowerJ", "LowerK", "LowerL", "LowerM", "LowerN", 
                      "LowerO", "LowerP", "LowerQ", "LowerR", "LowerS", 
                      "LowerT", "LowerU", "LowerV", "LowerW", "LowerX", 
                      "LowerY", "LowerZ", "BSlash", "Slash", "Zero", "Semi", 
                      "Dot", "Tilde", "Equal", "Vert", "Low", "Pow", "Plus", 
                      "Minus", "LShift", "RShift", "Dollar", "Percent", 
                      "DLBrack", "DRBrack", "Amp", "Apos", "Grave", "Comma", 
                      "Excl", "Colon", "Quest", "Space", "LParen", "RParen", 
                      "LBrace", "RBrace", "Adr1", "Adr2", "PlusSym", "CountCmd", 
                      "Flags", "UnnamedBuffer", "SimpleFilename", "StringFilename", 
                      "ShellCommand", "VisType", "SubOptions", "WindowTypes", 
                      "SlashSym", "ExclSym", "QuestSym", "AbbreviateSym", 
                      "AppendSym", "ArgsSym", "ChangeSym", "ChangeDirSym", 
                      "CopySym", "DeleteSym", "EditSym", "FileSym", "InsertSym", 
                      "JoinSym", "ListSym", "MapSym", "MarkSym", "MoveSym", 
                      "NextSym", "NumberSym", "OpenSym", "PreserveSym", 
                      "PrintSym", "PutSym", "PrevSym", "QuitSym", "ReadSym", 
                      "RecoverSym", "RewindSym", "SetSym", "ShellSym", "SourceSym", 
                      "SubstituteSym", "SubAndSym", "SubTildeSym", "SuspendSym", 
                      "TagSym", "UnabbreviateSym", "UndoSym", "UnmapSym", 
                      "VersionSym", "VisualSym", "WriteSym", "WriteQuitSym", 
                      "WriteExitSym", "GlobalSym", "YankSym", "WindowSym", 
                      "LShiftSym", "RShiftSym", "EqualSym", "AtExecuteSym", 
                      "AtTimesSym", "ColonEnd", "QuestOpt", "EqualOpt", 
                      "CountOpt", "SetNoSym", "SetAllSym", "LHS", "RHS", 
                      "ExOption", "WsOpt", "ColonOptEnd", "SetOptEnd", "SimpleFileName" ]

    RULE_start = 0
    RULE_adr1 = 1
    RULE_adr2 = 2
    RULE_count = 3
    RULE_countCmd = 4
    RULE_buffer = 5
    RULE_filename = 6
    RULE_directory = 7
    RULE_shellCommand = 8
    RULE_visType = 9
    RULE_subOptions = 10
    RULE_windowTypes = 11
    RULE_character = 12
    RULE_letter = 13
    RULE_tagString = 14
    RULE_value = 15
    RULE_pattern = 16
    RULE_replacement = 17
    RULE_newline = 18
    RULE_flags = 19
    RULE_lhs = 20
    RULE_rhs = 21
    RULE_rePattern = 22
    RULE_rePattRepl = 23
    RULE_setOptions = 24
    RULE_setOption = 25
    RULE_exCommand = 26
    RULE_viMotion = 27
    RULE_viCommand = 28
    RULE_inCommand = 29
    RULE_exMoreCommand = 30
    RULE_viMoreCommand = 31

    ruleNames =  [ "start", "adr1", "adr2", "count", "countCmd", "buffer", 
                   "filename", "directory", "shellCommand", "visType", "subOptions", 
                   "windowTypes", "character", "letter", "tagString", "value", 
                   "pattern", "replacement", "newline", "flags", "lhs", 
                   "rhs", "rePattern", "rePattRepl", "setOptions", "setOption", 
                   "exCommand", "viMotion", "viCommand", "inCommand", "exMoreCommand", 
                   "viMoreCommand" ]

    EOF = Token.EOF
    Count=1
    ControlA=2
    ControlB=3
    ControlC=4
    ControlD=5
    ControlE=6
    ControlF=7
    ControlG=8
    ControlH=9
    ControlI=10
    ControlJ=11
    ControlK=12
    ControlL=13
    ControlM=14
    ControlN=15
    ControlO=16
    ControlP=17
    ControlQ=18
    ControlR=19
    ControlS=20
    ControlT=21
    ControlU=22
    ControlV=23
    ControlW=24
    ControlX=25
    ControlY=26
    ControlZ=27
    ControlLBrack=28
    ControlBSlash=29
    ControlRBrack=30
    ControlPow=31
    ControlLow=32
    UpperA=33
    UpperB=34
    UpperC=35
    UpperD=36
    UpperE=37
    UpperF=38
    UpperG=39
    UpperH=40
    UpperI=41
    UpperJ=42
    UpperK=43
    UpperL=44
    UpperM=45
    UpperN=46
    UpperO=47
    UpperP=48
    UpperQ=49
    UpperR=50
    UpperS=51
    UpperT=52
    UpperU=53
    UpperV=54
    UpperW=55
    UpperX=56
    UpperY=57
    UpperZ=58
    LowerA=59
    LowerB=60
    LowerC=61
    LowerD=62
    LowerE=63
    LowerF=64
    LowerG=65
    LowerH=66
    LowerI=67
    LowerJ=68
    LowerK=69
    LowerL=70
    LowerM=71
    LowerN=72
    LowerO=73
    LowerP=74
    LowerQ=75
    LowerR=76
    LowerS=77
    LowerT=78
    LowerU=79
    LowerV=80
    LowerW=81
    LowerX=82
    LowerY=83
    LowerZ=84
    BSlash=85
    Slash=86
    Zero=87
    Semi=88
    Dot=89
    Tilde=90
    Equal=91
    Vert=92
    Low=93
    Pow=94
    Plus=95
    Minus=96
    LShift=97
    RShift=98
    Dollar=99
    Percent=100
    DLBrack=101
    DRBrack=102
    Amp=103
    Apos=104
    Grave=105
    Comma=106
    Excl=107
    Colon=108
    Quest=109
    Space=110
    LParen=111
    RParen=112
    LBrace=113
    RBrace=114
    Adr1=115
    Adr2=116
    PlusSym=117
    CountCmd=118
    Flags=119
    UnnamedBuffer=120
    SimpleFilename=121
    StringFilename=122
    ShellCommand=123
    VisType=124
    SubOptions=125
    WindowTypes=126
    SlashSym=127
    ExclSym=128
    QuestSym=129
    AbbreviateSym=130
    AppendSym=131
    ArgsSym=132
    ChangeSym=133
    ChangeDirSym=134
    CopySym=135
    DeleteSym=136
    EditSym=137
    FileSym=138
    InsertSym=139
    JoinSym=140
    ListSym=141
    MapSym=142
    MarkSym=143
    MoveSym=144
    NextSym=145
    NumberSym=146
    OpenSym=147
    PreserveSym=148
    PrintSym=149
    PutSym=150
    PrevSym=151
    QuitSym=152
    ReadSym=153
    RecoverSym=154
    RewindSym=155
    SetSym=156
    ShellSym=157
    SourceSym=158
    SubstituteSym=159
    SubAndSym=160
    SubTildeSym=161
    SuspendSym=162
    TagSym=163
    UnabbreviateSym=164
    UndoSym=165
    UnmapSym=166
    VersionSym=167
    VisualSym=168
    WriteSym=169
    WriteQuitSym=170
    WriteExitSym=171
    GlobalSym=172
    YankSym=173
    WindowSym=174
    LShiftSym=175
    RShiftSym=176
    EqualSym=177
    AtExecuteSym=178
    AtTimesSym=179
    ColonEnd=180
    QuestOpt=181
    EqualOpt=182
    CountOpt=183
    SetNoSym=184
    SetAllSym=185
    LHS=186
    RHS=187
    ExOption=188
    WsOpt=189
    ColonOptEnd=190
    SetOptEnd=191
    SimpleFileName=192

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def viCommand(self):
            return self.getTypedRuleContext(CommandParser.ViCommandContext,0)


        def EOF(self):
            return self.getToken(CommandParser.EOF, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_start

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart" ):
                return visitor.visitStart(self)
            else:
                return visitor.visitChildren(self)




    def start(self):

        localctx = CommandParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 64
            self.viCommand()
            self.state = 65
            self.match(CommandParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Adr1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Adr1(self):
            return self.getToken(CommandParser.Adr1, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_adr1

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdr1" ):
                return visitor.visitAdr1(self)
            else:
                return visitor.visitChildren(self)




    def adr1(self):

        localctx = CommandParser.Adr1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_adr1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 67
            self.match(CommandParser.Adr1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Adr2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Adr2(self):
            return self.getToken(CommandParser.Adr2, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_adr2

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdr2" ):
                return visitor.visitAdr2(self)
            else:
                return visitor.visitChildren(self)




    def adr2(self):

        localctx = CommandParser.Adr2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_adr2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 69
            self.match(CommandParser.Adr2)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Count(self):
            return self.getToken(CommandParser.Count, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_count

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCount" ):
                return visitor.visitCount(self)
            else:
                return visitor.visitChildren(self)




    def count(self):

        localctx = CommandParser.CountContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_count)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 71
            self.match(CommandParser.Count)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CountCmdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CountCmd(self):
            return self.getToken(CommandParser.CountCmd, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_countCmd

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCountCmd" ):
                return visitor.visitCountCmd(self)
            else:
                return visitor.visitChildren(self)




    def countCmd(self):

        localctx = CommandParser.CountCmdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_countCmd)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 73
            self.match(CommandParser.CountCmd)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BufferContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UnnamedBuffer(self):
            return self.getToken(CommandParser.UnnamedBuffer, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_buffer

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuffer" ):
                return visitor.visitBuffer(self)
            else:
                return visitor.visitChildren(self)




    def buffer_(self):

        localctx = CommandParser.BufferContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_buffer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 75
            self.match(CommandParser.UnnamedBuffer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleFileName(self):
            return self.getToken(CommandParser.SimpleFileName, 0)

        def StringFilename(self):
            return self.getToken(CommandParser.StringFilename, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_filename

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilename" ):
                return visitor.visitFilename(self)
            else:
                return visitor.visitChildren(self)




    def filename(self):

        localctx = CommandParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_filename)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 77
            _la = self._input.LA(1)
            if not(_la==122 or _la==192):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DirectoryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def filename(self):
            return self.getTypedRuleContext(CommandParser.FilenameContext,0)


        def getRuleIndex(self):
            return CommandParser.RULE_directory

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDirectory" ):
                return visitor.visitDirectory(self)
            else:
                return visitor.visitChildren(self)




    def directory(self):

        localctx = CommandParser.DirectoryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_directory)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 79
            self.filename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShellCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ShellCommand(self):
            return self.getToken(CommandParser.ShellCommand, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_shellCommand

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShellCommand" ):
                return visitor.visitShellCommand(self)
            else:
                return visitor.visitChildren(self)




    def shellCommand(self):

        localctx = CommandParser.ShellCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_shellCommand)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 81
            self.match(CommandParser.ShellCommand)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VisType(self):
            return self.getToken(CommandParser.VisType, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_visType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisType" ):
                return visitor.visitVisType(self)
            else:
                return visitor.visitChildren(self)




    def visType(self):

        localctx = CommandParser.VisTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_visType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 83
            self.match(CommandParser.VisType)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SubOptions(self):
            return self.getToken(CommandParser.SubOptions, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_subOptions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubOptions" ):
                return visitor.visitSubOptions(self)
            else:
                return visitor.visitChildren(self)




    def subOptions(self):

        localctx = CommandParser.SubOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_subOptions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 85
            self.match(CommandParser.SubOptions)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowTypesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WindowTypes(self):
            return self.getToken(CommandParser.WindowTypes, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_windowTypes

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindowTypes" ):
                return visitor.visitWindowTypes(self)
            else:
                return visitor.visitChildren(self)




    def windowTypes(self):

        localctx = CommandParser.WindowTypesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_windowTypes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 87
            self.match(CommandParser.WindowTypes)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharacterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleFilename(self):
            return self.getToken(CommandParser.SimpleFilename, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_character

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCharacter" ):
                return visitor.visitCharacter(self)
            else:
                return visitor.visitChildren(self)




    def character(self):

        localctx = CommandParser.CharacterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_character)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 89
            self.match(CommandParser.SimpleFilename)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleFilename(self):
            return self.getToken(CommandParser.SimpleFilename, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_letter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLetter" ):
                return visitor.visitLetter(self)
            else:
                return visitor.visitChildren(self)




    def letter(self):

        localctx = CommandParser.LetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_letter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 91
            self.match(CommandParser.SimpleFilename)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SimpleFilename(self):
            return self.getToken(CommandParser.SimpleFilename, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_tagString

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagString" ):
                return visitor.visitTagString(self)
            else:
                return visitor.visitChildren(self)




    def tagString(self):

        localctx = CommandParser.TagStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_tagString)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 93
            self.match(CommandParser.SimpleFilename)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CountOpt(self):
            return self.getToken(CommandParser.CountOpt, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_value

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = CommandParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 95
            self.match(CommandParser.CountOpt)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LowerP(self):
            return self.getToken(CommandParser.LowerP, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_pattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPattern" ):
                return visitor.visitPattern(self)
            else:
                return visitor.visitChildren(self)




    def pattern(self):

        localctx = CommandParser.PatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 97
            self.match(CommandParser.LowerP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplacementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LowerR(self):
            return self.getToken(CommandParser.LowerR, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_replacement

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReplacement" ):
                return visitor.visitReplacement(self)
            else:
                return visitor.visitChildren(self)




    def replacement(self):

        localctx = CommandParser.ReplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_replacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 99
            self.match(CommandParser.LowerR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewlineContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ControlJ(self):
            return self.getToken(CommandParser.ControlJ, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_newline

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewline" ):
                return visitor.visitNewline(self)
            else:
                return visitor.visitChildren(self)




    def newline(self):

        localctx = CommandParser.NewlineContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_newline)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 101
            self.match(CommandParser.ControlJ)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlagsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CommandParser.Flags, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_flags

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFlags" ):
                return visitor.visitFlags(self)
            else:
                return visitor.visitChildren(self)




    def flags(self):

        localctx = CommandParser.FlagsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_flags)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 103
            self.match(CommandParser.Flags)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LHS(self):
            return self.getToken(CommandParser.LHS, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_lhs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLhs" ):
                return visitor.visitLhs(self)
            else:
                return visitor.visitChildren(self)




    def lhs(self):

        localctx = CommandParser.LhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_lhs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 105
            self.match(CommandParser.LHS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RhsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RHS(self):
            return self.getToken(CommandParser.RHS, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_rhs

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRhs" ):
                return visitor.visitRhs(self)
            else:
                return visitor.visitChildren(self)




    def rhs(self):

        localctx = CommandParser.RhsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_rhs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 107
            self.match(CommandParser.RHS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RePatternContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SlashSym(self, i:int=None):
            if i is None:
                return self.getTokens(CommandParser.SlashSym)
            else:
                return self.getToken(CommandParser.SlashSym, i)

        def pattern(self):
            return self.getTypedRuleContext(CommandParser.PatternContext,0)


        def getRuleIndex(self):
            return CommandParser.RULE_rePattern

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRePattern" ):
                return visitor.visitRePattern(self)
            else:
                return visitor.visitChildren(self)




    def rePattern(self):

        localctx = CommandParser.RePatternContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rePattern)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 109
            self.match(CommandParser.SlashSym)
            self.state = 110
            self.pattern()
            self.state = 111
            self.match(CommandParser.SlashSym)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RePattReplContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SlashSym(self, i:int=None):
            if i is None:
                return self.getTokens(CommandParser.SlashSym)
            else:
                return self.getToken(CommandParser.SlashSym, i)

        def pattern(self):
            return self.getTypedRuleContext(CommandParser.PatternContext,0)


        def replacement(self):
            return self.getTypedRuleContext(CommandParser.ReplacementContext,0)


        def getRuleIndex(self):
            return CommandParser.RULE_rePattRepl

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRePattRepl" ):
                return visitor.visitRePattRepl(self)
            else:
                return visitor.visitChildren(self)




    def rePattRepl(self):

        localctx = CommandParser.RePattReplContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_rePattRepl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 113
            self.match(CommandParser.SlashSym)
            self.state = 114
            self.pattern()
            self.state = 115
            self.match(CommandParser.SlashSym)
            self.state = 116
            self.replacement()
            self.state = 117
            self.match(CommandParser.SlashSym)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def setOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CommandParser.SetOptionContext)
            else:
                return self.getTypedRuleContext(CommandParser.SetOptionContext,i)


        def getRuleIndex(self):
            return CommandParser.RULE_setOptions

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOptions" ):
                return visitor.visitSetOptions(self)
            else:
                return visitor.visitChildren(self)




    def setOptions(self):

        localctx = CommandParser.SetOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_setOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 120 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 119
                self.setOption()
                self.state = 122 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & 19) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ExOption(self):
            return self.getToken(CommandParser.ExOption, 0)

        def EqualOpt(self):
            return self.getToken(CommandParser.EqualOpt, 0)

        def value(self):
            return self.getTypedRuleContext(CommandParser.ValueContext,0)


        def QuestOpt(self):
            return self.getToken(CommandParser.QuestOpt, 0)

        def SetNoSym(self):
            return self.getToken(CommandParser.SetNoSym, 0)

        def SetAllSym(self):
            return self.getToken(CommandParser.SetAllSym, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_setOption

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetOption" ):
                return visitor.visitSetOption(self)
            else:
                return visitor.visitChildren(self)




    def setOption(self):

        localctx = CommandParser.SetOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_setOption)
        self._la = 0 # Token type
        try:
            self.state = 134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 124
                self.match(CommandParser.ExOption)
                self.state = 127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 125
                    self.match(CommandParser.EqualOpt)
                    self.state = 126
                    self.value()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 129
                self.match(CommandParser.ExOption)
                self.state = 130
                self.match(CommandParser.QuestOpt)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 131
                self.match(CommandParser.SetNoSym)
                self.state = 132
                self.match(CommandParser.ExOption)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 133
                self.match(CommandParser.SetAllSym)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AbbreviateSym(self):
            return self.getToken(CommandParser.AbbreviateSym, 0)

        def lhs(self):
            return self.getTypedRuleContext(CommandParser.LhsContext,0)


        def rhs(self):
            return self.getTypedRuleContext(CommandParser.RhsContext,0)


        def AppendSym(self):
            return self.getToken(CommandParser.AppendSym, 0)

        def adr1(self):
            return self.getTypedRuleContext(CommandParser.Adr1Context,0)


        def ExclSym(self):
            return self.getToken(CommandParser.ExclSym, 0)

        def ArgsSym(self):
            return self.getToken(CommandParser.ArgsSym, 0)

        def ChangeSym(self):
            return self.getToken(CommandParser.ChangeSym, 0)

        def countCmd(self):
            return self.getTypedRuleContext(CommandParser.CountCmdContext,0)


        def adr2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CommandParser.Adr2Context)
            else:
                return self.getTypedRuleContext(CommandParser.Adr2Context,i)


        def ChangeDirSym(self):
            return self.getToken(CommandParser.ChangeDirSym, 0)

        def directory(self):
            return self.getTypedRuleContext(CommandParser.DirectoryContext,0)


        def CopySym(self):
            return self.getToken(CommandParser.CopySym, 0)

        def flags(self):
            return self.getTypedRuleContext(CommandParser.FlagsContext,0)


        def DeleteSym(self):
            return self.getToken(CommandParser.DeleteSym, 0)

        def buffer_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CommandParser.BufferContext)
            else:
                return self.getTypedRuleContext(CommandParser.BufferContext,i)


        def EditSym(self):
            return self.getToken(CommandParser.EditSym, 0)

        def PlusSym(self):
            return self.getToken(CommandParser.PlusSym, 0)

        def exCommand(self):
            return self.getTypedRuleContext(CommandParser.ExCommandContext,0)


        def filename(self):
            return self.getTypedRuleContext(CommandParser.FilenameContext,0)


        def FileSym(self):
            return self.getToken(CommandParser.FileSym, 0)

        def GlobalSym(self):
            return self.getToken(CommandParser.GlobalSym, 0)

        def rePattern(self):
            return self.getTypedRuleContext(CommandParser.RePatternContext,0)


        def InsertSym(self):
            return self.getToken(CommandParser.InsertSym, 0)

        def JoinSym(self):
            return self.getToken(CommandParser.JoinSym, 0)

        def ListSym(self):
            return self.getToken(CommandParser.ListSym, 0)

        def MapSym(self):
            return self.getToken(CommandParser.MapSym, 0)

        def MarkSym(self):
            return self.getToken(CommandParser.MarkSym, 0)

        def character(self):
            return self.getTypedRuleContext(CommandParser.CharacterContext,0)


        def MoveSym(self):
            return self.getToken(CommandParser.MoveSym, 0)

        def NextSym(self):
            return self.getToken(CommandParser.NextSym, 0)

        def NumberSym(self):
            return self.getToken(CommandParser.NumberSym, 0)

        def OpenSym(self):
            return self.getToken(CommandParser.OpenSym, 0)

        def PreserveSym(self):
            return self.getToken(CommandParser.PreserveSym, 0)

        def PrintSym(self):
            return self.getToken(CommandParser.PrintSym, 0)

        def PutSym(self):
            return self.getToken(CommandParser.PutSym, 0)

        def QuitSym(self):
            return self.getToken(CommandParser.QuitSym, 0)

        def ReadSym(self):
            return self.getToken(CommandParser.ReadSym, 0)

        def RecoverSym(self):
            return self.getToken(CommandParser.RecoverSym, 0)

        def RewindSym(self):
            return self.getToken(CommandParser.RewindSym, 0)

        def SetSym(self):
            return self.getToken(CommandParser.SetSym, 0)

        def ColonOptEnd(self):
            return self.getToken(CommandParser.ColonOptEnd, 0)

        def SetOptEnd(self):
            return self.getToken(CommandParser.SetOptEnd, 0)

        def setOptions(self):
            return self.getTypedRuleContext(CommandParser.SetOptionsContext,0)


        def ShellSym(self):
            return self.getToken(CommandParser.ShellSym, 0)

        def SourceSym(self):
            return self.getToken(CommandParser.SourceSym, 0)

        def SubstituteSym(self):
            return self.getToken(CommandParser.SubstituteSym, 0)

        def rePattRepl(self):
            return self.getTypedRuleContext(CommandParser.RePattReplContext,0)


        def subOptions(self):
            return self.getTypedRuleContext(CommandParser.SubOptionsContext,0)


        def SubAndSym(self):
            return self.getToken(CommandParser.SubAndSym, 0)

        def SubTildeSym(self):
            return self.getToken(CommandParser.SubTildeSym, 0)

        def SuspendSym(self):
            return self.getToken(CommandParser.SuspendSym, 0)

        def TagSym(self):
            return self.getToken(CommandParser.TagSym, 0)

        def tagString(self):
            return self.getTypedRuleContext(CommandParser.TagStringContext,0)


        def UnabbreviateSym(self):
            return self.getToken(CommandParser.UnabbreviateSym, 0)

        def UndoSym(self):
            return self.getToken(CommandParser.UndoSym, 0)

        def UnmapSym(self):
            return self.getToken(CommandParser.UnmapSym, 0)

        def VersionSym(self):
            return self.getToken(CommandParser.VersionSym, 0)

        def VisualSym(self):
            return self.getToken(CommandParser.VisualSym, 0)

        def visType(self):
            return self.getTypedRuleContext(CommandParser.VisTypeContext,0)


        def WriteSym(self):
            return self.getToken(CommandParser.WriteSym, 0)

        def RShift(self):
            return self.getToken(CommandParser.RShift, 0)

        def WriteQuitSym(self):
            return self.getToken(CommandParser.WriteQuitSym, 0)

        def WriteExitSym(self):
            return self.getToken(CommandParser.WriteExitSym, 0)

        def YankSym(self):
            return self.getToken(CommandParser.YankSym, 0)

        def WindowSym(self):
            return self.getToken(CommandParser.WindowSym, 0)

        def windowTypes(self):
            return self.getTypedRuleContext(CommandParser.WindowTypesContext,0)


        def shellCommand(self):
            return self.getTypedRuleContext(CommandParser.ShellCommandContext,0)


        def LShiftSym(self):
            return self.getToken(CommandParser.LShiftSym, 0)

        def RShiftSym(self):
            return self.getToken(CommandParser.RShiftSym, 0)

        def ControlD(self):
            return self.getToken(CommandParser.ControlD, 0)

        def EqualSym(self):
            return self.getToken(CommandParser.EqualSym, 0)

        def AtExecuteSym(self):
            return self.getToken(CommandParser.AtExecuteSym, 0)

        def AtTimesSym(self):
            return self.getToken(CommandParser.AtTimesSym, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_exCommand

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExCommand" ):
                return visitor.visitExCommand(self)
            else:
                return visitor.visitChildren(self)




    def exCommand(self):

        localctx = CommandParser.ExCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_exCommand)
        self._la = 0 # Token type
        try:
            self.state = 501
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 136
                self.match(CommandParser.AbbreviateSym)
                self.state = 140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==186:
                    self.state = 137
                    self.lhs()
                    self.state = 138
                    self.rhs()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 143
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 142
                    self.adr1()


                self.state = 145
                self.match(CommandParser.AppendSym)
                self.state = 147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 146
                    self.match(CommandParser.ExclSym)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 149
                self.match(CommandParser.ArgsSym)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 150
                    self.adr2()


                self.state = 153
                self.match(CommandParser.ChangeSym)
                self.state = 155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 154
                    self.match(CommandParser.ExclSym)


                self.state = 157
                self.countCmd()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 158
                self.match(CommandParser.ChangeDirSym)
                self.state = 160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 159
                    self.match(CommandParser.ExclSym)


                self.state = 162
                self.directory()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 164
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 163
                    self.adr2()


                self.state = 166
                self.match(CommandParser.CopySym)
                self.state = 167
                self.adr1()
                self.state = 169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 168
                    self.flags()


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 171
                    self.adr2()


                self.state = 174
                self.match(CommandParser.DeleteSym)
                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 175
                    self.buffer_()


                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 178
                    self.countCmd()


                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 181
                    self.flags()


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 184
                self.match(CommandParser.EditSym)
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 185
                    self.match(CommandParser.ExclSym)


                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==117:
                    self.state = 188
                    self.match(CommandParser.PlusSym)
                    self.state = 189
                    self.exCommand()


                self.state = 193
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 192
                    self.filename()


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 195
                self.match(CommandParser.FileSym)
                self.state = 197
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 196
                    self.filename()


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 199
                    self.adr2()


                self.state = 202
                self.match(CommandParser.GlobalSym)
                self.state = 203
                self.rePattern()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 204
                    self.adr1()


                self.state = 207
                self.match(CommandParser.InsertSym)
                self.state = 209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 208
                    self.match(CommandParser.ExclSym)


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 211
                    self.adr2()


                self.state = 214
                self.match(CommandParser.JoinSym)
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 215
                    self.match(CommandParser.ExclSym)


                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 218
                    self.countCmd()


                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 221
                    self.flags()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 224
                    self.adr2()


                self.state = 227
                self.match(CommandParser.ListSym)
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 228
                    self.countCmd()


                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 231
                    self.flags()


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 234
                self.match(CommandParser.MapSym)
                self.state = 236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 235
                    self.match(CommandParser.ExclSym)


                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==186:
                    self.state = 238
                    self.lhs()
                    self.state = 239
                    self.rhs()


                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 243
                    self.adr1()


                self.state = 246
                self.match(CommandParser.MarkSym)
                self.state = 247
                self.character()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 248
                    self.adr2()


                self.state = 251
                self.match(CommandParser.MoveSym)
                self.state = 252
                self.adr1()
                self.state = 254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 253
                    self.flags()


                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 256
                self.match(CommandParser.NextSym)
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 257
                    self.match(CommandParser.ExclSym)


                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 260
                    self.adr2()


                self.state = 263
                self.match(CommandParser.NumberSym)
                self.state = 265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 264
                    self.countCmd()


                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 267
                    self.flags()


                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 270
                    self.adr1()


                self.state = 273
                self.match(CommandParser.OpenSym)
                self.state = 274
                self.rePattern()
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 275
                    self.flags()


                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 278
                self.match(CommandParser.PreserveSym)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 279
                    self.adr2()


                self.state = 282
                self.match(CommandParser.PrintSym)
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 283
                    self.countCmd()


                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 286
                    self.flags()


                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 289
                    self.adr1()


                self.state = 292
                self.match(CommandParser.PutSym)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 293
                    self.buffer_()


                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 296
                self.match(CommandParser.QuitSym)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 297
                    self.match(CommandParser.ExclSym)


                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 300
                    self.adr1()


                self.state = 303
                self.match(CommandParser.ReadSym)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 304
                    self.match(CommandParser.ExclSym)


                self.state = 308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 307
                    self.filename()


                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 310
                self.match(CommandParser.RecoverSym)
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 311
                    self.match(CommandParser.ExclSym)


                self.state = 314
                self.filename()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 315
                self.match(CommandParser.RewindSym)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 316
                    self.match(CommandParser.ExclSym)


                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 319
                self.match(CommandParser.SetSym)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 184)) & ~0x3f) == 0 and ((1 << (_la - 184)) & 19) != 0):
                    self.state = 320
                    self.setOptions()


                self.state = 323
                _la = self._input.LA(1)
                if not(_la==190 or _la==191):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 324
                self.match(CommandParser.ShellSym)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 325
                self.match(CommandParser.SourceSym)
                self.state = 326
                self.filename()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 327
                    self.adr2()


                self.state = 330
                self.match(CommandParser.SubstituteSym)
                self.state = 331
                self.rePattRepl()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 332
                    self.subOptions()


                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 335
                    self.countCmd()


                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 338
                    self.flags()


                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 341
                    self.adr2()


                self.state = 344
                self.match(CommandParser.SubAndSym)
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 345
                    self.subOptions()


                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 348
                    self.countCmd()


                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 351
                    self.flags()


                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 354
                    self.adr2()


                self.state = 357
                self.match(CommandParser.SubTildeSym)
                self.state = 359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 358
                    self.subOptions()


                self.state = 362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 361
                    self.countCmd()


                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 364
                    self.flags()


                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 367
                self.match(CommandParser.SuspendSym)
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 368
                    self.match(CommandParser.ExclSym)


                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 371
                self.match(CommandParser.TagSym)
                self.state = 373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 372
                    self.match(CommandParser.ExclSym)


                self.state = 375
                self.tagString()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 376
                self.match(CommandParser.UnabbreviateSym)
                self.state = 377
                self.lhs()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 378
                self.match(CommandParser.UndoSym)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 379
                self.match(CommandParser.UnmapSym)
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 380
                    self.match(CommandParser.ExclSym)


                self.state = 383
                self.lhs()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 384
                self.match(CommandParser.VersionSym)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 385
                    self.adr1()


                self.state = 388
                self.match(CommandParser.VisualSym)
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==124:
                    self.state = 389
                    self.visType()


                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 392
                    self.countCmd()


                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 395
                    self.flags()


                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 399
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 398
                    self.adr2()


                self.state = 401
                self.match(CommandParser.WriteSym)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 402
                    self.match(CommandParser.ExclSym)


                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 405
                    self.match(CommandParser.RShift)


                self.state = 409
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
                if la_ == 1:
                    self.state = 408
                    self.filename()


                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 411
                    self.adr2()


                self.state = 414
                self.match(CommandParser.WriteQuitSym)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 415
                    self.match(CommandParser.ExclSym)


                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 418
                    self.match(CommandParser.RShift)


                self.state = 422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 421
                    self.filename()


                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 424
                    self.adr2()


                self.state = 427
                self.match(CommandParser.WriteExitSym)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 428
                    self.match(CommandParser.ExclSym)


                self.state = 432
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 431
                    self.filename()


                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 434
                    self.adr2()


                self.state = 437
                self.match(CommandParser.YankSym)
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 438
                    self.buffer_()


                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 441
                    self.countCmd()


                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 444
                    self.adr1()


                self.state = 447
                self.match(CommandParser.WindowSym)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==126:
                    self.state = 448
                    self.windowTypes()


                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 451
                    self.countCmd()


                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 454
                    self.flags()


                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 457
                    self.adr1()


                self.state = 460
                self.match(CommandParser.ExclSym)
                self.state = 461
                self.shellCommand()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 462
                    self.adr2()


                self.state = 465
                self.match(CommandParser.LShiftSym)
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 466
                    self.countCmd()


                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 469
                    self.flags()


                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 472
                    self.adr2()


                self.state = 475
                self.match(CommandParser.RShiftSym)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==118:
                    self.state = 476
                    self.countCmd()


                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 479
                    self.flags()


                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 482
                self.match(CommandParser.ControlD)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==115:
                    self.state = 483
                    self.adr1()


                self.state = 486
                self.match(CommandParser.EqualSym)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==119:
                    self.state = 487
                    self.flags()


                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 490
                    self.adr2()


                self.state = 493
                self.match(CommandParser.AtExecuteSym)
                self.state = 494
                self.buffer_()
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==116:
                    self.state = 495
                    self.adr2()


                self.state = 498
                self.match(CommandParser.AtTimesSym)
                self.state = 499
                self.buffer_()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViMotionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ControlH(self):
            return self.getToken(CommandParser.ControlH, 0)

        def count(self):
            return self.getTypedRuleContext(CommandParser.CountContext,0)


        def LowerH(self):
            return self.getToken(CommandParser.LowerH, 0)

        def ControlJ(self):
            return self.getToken(CommandParser.ControlJ, 0)

        def ControlM(self):
            return self.getToken(CommandParser.ControlM, 0)

        def ControlN(self):
            return self.getToken(CommandParser.ControlN, 0)

        def LowerJ(self):
            return self.getToken(CommandParser.LowerJ, 0)

        def Plus(self):
            return self.getToken(CommandParser.Plus, 0)

        def Space(self):
            return self.getToken(CommandParser.Space, 0)

        def LowerL(self):
            return self.getToken(CommandParser.LowerL, 0)

        def ControlP(self):
            return self.getToken(CommandParser.ControlP, 0)

        def LowerK(self):
            return self.getToken(CommandParser.LowerK, 0)

        def Minus(self):
            return self.getToken(CommandParser.Minus, 0)

        def LParen(self):
            return self.getToken(CommandParser.LParen, 0)

        def RParen(self):
            return self.getToken(CommandParser.RParen, 0)

        def LBrace(self):
            return self.getToken(CommandParser.LBrace, 0)

        def RBrace(self):
            return self.getToken(CommandParser.RBrace, 0)

        def DLBrack(self):
            return self.getToken(CommandParser.DLBrack, 0)

        def DRBrack(self):
            return self.getToken(CommandParser.DRBrack, 0)

        def Dollar(self):
            return self.getToken(CommandParser.Dollar, 0)

        def Percent(self):
            return self.getToken(CommandParser.Percent, 0)

        def Amp(self):
            return self.getToken(CommandParser.Amp, 0)

        def Apos(self):
            return self.getToken(CommandParser.Apos, 0)

        def character(self):
            return self.getTypedRuleContext(CommandParser.CharacterContext,0)


        def Grave(self):
            return self.getToken(CommandParser.Grave, 0)

        def Pow(self):
            return self.getToken(CommandParser.Pow, 0)

        def Low(self):
            return self.getToken(CommandParser.Low, 0)

        def Vert(self):
            return self.getToken(CommandParser.Vert, 0)

        def Comma(self):
            return self.getToken(CommandParser.Comma, 0)

        def Slash(self):
            return self.getToken(CommandParser.Slash, 0)

        def Zero(self):
            return self.getToken(CommandParser.Zero, 0)

        def Semi(self):
            return self.getToken(CommandParser.Semi, 0)

        def Quest(self):
            return self.getToken(CommandParser.Quest, 0)

        def LowerB(self):
            return self.getToken(CommandParser.LowerB, 0)

        def UpperB(self):
            return self.getToken(CommandParser.UpperB, 0)

        def LowerE(self):
            return self.getToken(CommandParser.LowerE, 0)

        def UpperE(self):
            return self.getToken(CommandParser.UpperE, 0)

        def LowerF(self):
            return self.getToken(CommandParser.LowerF, 0)

        def UpperF(self):
            return self.getToken(CommandParser.UpperF, 0)

        def UpperG(self):
            return self.getToken(CommandParser.UpperG, 0)

        def UpperH(self):
            return self.getToken(CommandParser.UpperH, 0)

        def UpperL(self):
            return self.getToken(CommandParser.UpperL, 0)

        def UpperM(self):
            return self.getToken(CommandParser.UpperM, 0)

        def LowerN(self):
            return self.getToken(CommandParser.LowerN, 0)

        def UpperN(self):
            return self.getToken(CommandParser.UpperN, 0)

        def LowerT(self):
            return self.getToken(CommandParser.LowerT, 0)

        def UpperT(self):
            return self.getToken(CommandParser.UpperT, 0)

        def LowerW(self):
            return self.getToken(CommandParser.LowerW, 0)

        def UpperW(self):
            return self.getToken(CommandParser.UpperW, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_viMotion

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViMotion" ):
                return visitor.visitViMotion(self)
            else:
                return visitor.visitChildren(self)




    def viMotion(self):

        localctx = CommandParser.ViMotionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_viMotion)
        self._la = 0 # Token type
        try:
            self.state = 670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 503
                    self.count()


                self.state = 506
                self.match(CommandParser.ControlH)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 507
                    self.count()


                self.state = 510
                self.match(CommandParser.LowerH)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 511
                    self.count()


                self.state = 514
                self.match(CommandParser.ControlJ)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 515
                    self.count()


                self.state = 518
                self.match(CommandParser.ControlM)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 519
                    self.count()


                self.state = 522
                self.match(CommandParser.ControlN)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 523
                    self.count()


                self.state = 526
                self.match(CommandParser.LowerJ)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 527
                    self.count()


                self.state = 530
                self.match(CommandParser.Plus)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 531
                    self.count()


                self.state = 534
                self.match(CommandParser.Space)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 535
                    self.count()


                self.state = 538
                self.match(CommandParser.LowerL)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 539
                    self.count()


                self.state = 542
                self.match(CommandParser.ControlP)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 543
                    self.count()


                self.state = 546
                self.match(CommandParser.LowerK)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 547
                    self.count()


                self.state = 550
                self.match(CommandParser.Minus)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 551
                    self.count()


                self.state = 554
                self.match(CommandParser.LParen)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 555
                    self.count()


                self.state = 558
                self.match(CommandParser.RParen)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 559
                    self.count()


                self.state = 562
                self.match(CommandParser.LBrace)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 563
                    self.count()


                self.state = 566
                self.match(CommandParser.RBrace)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 567
                    self.count()


                self.state = 570
                self.match(CommandParser.DLBrack)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 571
                    self.count()


                self.state = 574
                self.match(CommandParser.DRBrack)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 575
                    self.count()


                self.state = 578
                self.match(CommandParser.Dollar)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 579
                self.match(CommandParser.Percent)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 580
                self.match(CommandParser.Amp)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 581
                self.match(CommandParser.Apos)
                self.state = 582
                self.character()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 583
                self.match(CommandParser.Grave)
                self.state = 584
                self.character()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 585
                self.match(CommandParser.Pow)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 586
                    self.count()


                self.state = 589
                self.match(CommandParser.Low)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 590
                    self.count()


                self.state = 593
                self.match(CommandParser.Vert)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 594
                    self.count()


                self.state = 597
                self.match(CommandParser.Comma)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 598
                    self.count()


                self.state = 601
                self.match(CommandParser.Slash)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 602
                    self.count()


                self.state = 605
                self.match(CommandParser.Zero)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 606
                    self.count()


                self.state = 609
                self.match(CommandParser.Semi)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 610
                self.match(CommandParser.Quest)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 611
                    self.count()


                self.state = 614
                self.match(CommandParser.LowerB)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 615
                    self.count()


                self.state = 618
                self.match(CommandParser.UpperB)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 619
                    self.count()


                self.state = 622
                self.match(CommandParser.LowerE)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 623
                    self.count()


                self.state = 626
                self.match(CommandParser.UpperE)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 627
                    self.count()


                self.state = 630
                self.match(CommandParser.LowerF)
                self.state = 631
                self.character()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 632
                    self.count()


                self.state = 635
                self.match(CommandParser.UpperF)
                self.state = 636
                self.character()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 637
                    self.count()


                self.state = 640
                self.match(CommandParser.UpperG)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 641
                    self.count()


                self.state = 644
                self.match(CommandParser.UpperH)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 645
                    self.count()


                self.state = 648
                self.match(CommandParser.UpperL)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 649
                self.match(CommandParser.UpperM)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 650
                self.match(CommandParser.LowerN)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 651
                self.match(CommandParser.UpperN)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 652
                    self.count()


                self.state = 655
                self.match(CommandParser.LowerT)
                self.state = 656
                self.character()
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 657
                    self.count()


                self.state = 660
                self.match(CommandParser.UpperT)
                self.state = 661
                self.character()
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 662
                    self.count()


                self.state = 665
                self.match(CommandParser.LowerW)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 666
                    self.count()


                self.state = 669
                self.match(CommandParser.UpperW)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ControlU(self):
            return self.getToken(CommandParser.ControlU, 0)

        def count(self):
            return self.getTypedRuleContext(CommandParser.CountContext,0)


        def ControlD(self):
            return self.getToken(CommandParser.ControlD, 0)

        def ControlY(self):
            return self.getToken(CommandParser.ControlY, 0)

        def ControlE(self):
            return self.getToken(CommandParser.ControlE, 0)

        def ControlB(self):
            return self.getToken(CommandParser.ControlB, 0)

        def ControlF(self):
            return self.getToken(CommandParser.ControlF, 0)

        def ControlG(self):
            return self.getToken(CommandParser.ControlG, 0)

        def ControlL(self):
            return self.getToken(CommandParser.ControlL, 0)

        def ControlR(self):
            return self.getToken(CommandParser.ControlR, 0)

        def ControlPow(self):
            return self.getToken(CommandParser.ControlPow, 0)

        def ControlLBrack(self):
            return self.getToken(CommandParser.ControlLBrack, 0)

        def ControlRBrack(self):
            return self.getToken(CommandParser.ControlRBrack, 0)

        def Excl(self):
            return self.getToken(CommandParser.Excl, 0)

        def viMotion(self):
            return self.getTypedRuleContext(CommandParser.ViMotionContext,0)


        def shellCommand(self):
            return self.getTypedRuleContext(CommandParser.ShellCommandContext,0)


        def newline(self):
            return self.getTypedRuleContext(CommandParser.NewlineContext,0)


        def Dot(self):
            return self.getToken(CommandParser.Dot, 0)

        def Colon(self):
            return self.getToken(CommandParser.Colon, 0)

        def exCommand(self):
            return self.getTypedRuleContext(CommandParser.ExCommandContext,0)


        def ColonEnd(self):
            return self.getToken(CommandParser.ColonEnd, 0)

        def LShift(self):
            return self.getToken(CommandParser.LShift, 0)

        def RShift(self):
            return self.getToken(CommandParser.RShift, 0)

        def AtExecuteSym(self):
            return self.getToken(CommandParser.AtExecuteSym, 0)

        def buffer_(self):
            return self.getTypedRuleContext(CommandParser.BufferContext,0)


        def SubTildeSym(self):
            return self.getToken(CommandParser.SubTildeSym, 0)

        def LowerA(self):
            return self.getToken(CommandParser.LowerA, 0)

        def UpperA(self):
            return self.getToken(CommandParser.UpperA, 0)

        def LowerC(self):
            return self.getToken(CommandParser.LowerC, 0)

        def UpperC(self):
            return self.getToken(CommandParser.UpperC, 0)

        def LowerD(self):
            return self.getToken(CommandParser.LowerD, 0)

        def UpperD(self):
            return self.getToken(CommandParser.UpperD, 0)

        def LowerI(self):
            return self.getToken(CommandParser.LowerI, 0)

        def UpperI(self):
            return self.getToken(CommandParser.UpperI, 0)

        def UpperJ(self):
            return self.getToken(CommandParser.UpperJ, 0)

        def LowerM(self):
            return self.getToken(CommandParser.LowerM, 0)

        def letter(self):
            return self.getTypedRuleContext(CommandParser.LetterContext,0)


        def LowerO(self):
            return self.getToken(CommandParser.LowerO, 0)

        def UpperO(self):
            return self.getToken(CommandParser.UpperO, 0)

        def LowerP(self):
            return self.getToken(CommandParser.LowerP, 0)

        def UpperP(self):
            return self.getToken(CommandParser.UpperP, 0)

        def UpperQ(self):
            return self.getToken(CommandParser.UpperQ, 0)

        def LowerR(self):
            return self.getToken(CommandParser.LowerR, 0)

        def character(self):
            return self.getTypedRuleContext(CommandParser.CharacterContext,0)


        def UpperR(self):
            return self.getToken(CommandParser.UpperR, 0)

        def LowerS(self):
            return self.getToken(CommandParser.LowerS, 0)

        def UpperS(self):
            return self.getToken(CommandParser.UpperS, 0)

        def LowerU(self):
            return self.getToken(CommandParser.LowerU, 0)

        def UpperU(self):
            return self.getToken(CommandParser.UpperU, 0)

        def LowerX(self):
            return self.getToken(CommandParser.LowerX, 0)

        def UpperX(self):
            return self.getToken(CommandParser.UpperX, 0)

        def LowerY(self):
            return self.getToken(CommandParser.LowerY, 0)

        def UpperY(self):
            return self.getToken(CommandParser.UpperY, 0)

        def LowerZ(self):
            return self.getToken(CommandParser.LowerZ, 0)

        def UpperZ(self, i:int=None):
            if i is None:
                return self.getTokens(CommandParser.UpperZ)
            else:
                return self.getToken(CommandParser.UpperZ, i)

        def getRuleIndex(self):
            return CommandParser.RULE_viCommand

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViCommand" ):
                return visitor.visitViCommand(self)
            else:
                return visitor.visitChildren(self)




    def viCommand(self):

        localctx = CommandParser.ViCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_viCommand)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 672
                    self.count()


                self.state = 675
                self.match(CommandParser.ControlU)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 676
                    self.count()


                self.state = 679
                self.match(CommandParser.ControlD)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 680
                    self.count()


                self.state = 683
                self.match(CommandParser.ControlY)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 684
                    self.count()


                self.state = 687
                self.match(CommandParser.ControlE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 688
                    self.count()


                self.state = 691
                self.match(CommandParser.ControlB)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 692
                    self.count()


                self.state = 695
                self.match(CommandParser.ControlF)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 696
                self.match(CommandParser.ControlG)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 697
                self.match(CommandParser.ControlL)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 698
                self.match(CommandParser.ControlR)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 699
                self.match(CommandParser.ControlPow)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 700
                self.match(CommandParser.ControlLBrack)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 701
                self.match(CommandParser.ControlRBrack)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 702
                    self.count()


                self.state = 705
                self.match(CommandParser.Excl)
                self.state = 706
                self.viMotion()
                self.state = 707
                self.shellCommand()
                self.state = 708
                self.newline()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 710
                    self.count()


                self.state = 713
                self.match(CommandParser.Dot)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 714
                    self.count()


                self.state = 717
                self.match(CommandParser.Colon)
                self.state = 718
                self.exCommand()
                self.state = 719
                self.match(CommandParser.ColonEnd)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 721
                    self.count()


                self.state = 724
                self.match(CommandParser.LShift)
                self.state = 725
                self.viMotion()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 726
                    self.count()


                self.state = 729
                self.match(CommandParser.RShift)
                self.state = 730
                self.viMotion()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 731
                self.match(CommandParser.AtExecuteSym)
                self.state = 732
                self.buffer_()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 733
                self.match(CommandParser.SubTildeSym)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 734
                    self.count()


                self.state = 737
                self.match(CommandParser.LowerA)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 738
                    self.count()


                self.state = 741
                self.match(CommandParser.UpperA)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 742
                    self.buffer_()


                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 745
                    self.count()


                self.state = 748
                self.match(CommandParser.LowerC)
                self.state = 749
                self.viMotion()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 750
                    self.buffer_()


                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 753
                    self.count()


                self.state = 756
                self.match(CommandParser.UpperC)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 757
                    self.buffer_()


                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 760
                    self.count()


                self.state = 763
                self.match(CommandParser.LowerD)
                self.state = 764
                self.viMotion()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 765
                    self.buffer_()


                self.state = 768
                self.match(CommandParser.UpperD)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 769
                    self.count()


                self.state = 772
                self.match(CommandParser.LowerI)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 773
                    self.count()


                self.state = 776
                self.match(CommandParser.UpperI)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 777
                    self.count()


                self.state = 780
                self.match(CommandParser.UpperJ)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 781
                self.match(CommandParser.LowerM)
                self.state = 782
                self.letter()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 783
                self.match(CommandParser.LowerO)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 784
                self.match(CommandParser.UpperO)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 785
                    self.buffer_()


                self.state = 788
                self.match(CommandParser.LowerP)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 789
                    self.buffer_()


                self.state = 792
                self.match(CommandParser.UpperP)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 793
                self.match(CommandParser.UpperQ)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 794
                    self.count()


                self.state = 797
                self.match(CommandParser.LowerR)
                self.state = 798
                self.character()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 799
                self.match(CommandParser.UpperR)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 800
                    self.buffer_()


                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 803
                    self.count()


                self.state = 806
                self.match(CommandParser.LowerS)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 807
                    self.buffer_()


                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 810
                    self.count()


                self.state = 813
                self.match(CommandParser.UpperS)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 814
                self.match(CommandParser.LowerU)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 815
                self.match(CommandParser.UpperU)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 816
                    self.buffer_()


                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 819
                    self.count()


                self.state = 822
                self.match(CommandParser.LowerX)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 823
                    self.buffer_()


                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 826
                    self.count()


                self.state = 829
                self.match(CommandParser.UpperX)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 830
                    self.buffer_()


                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 833
                    self.count()


                self.state = 836
                self.match(CommandParser.LowerY)
                self.state = 837
                self.viMotion()
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==120:
                    self.state = 838
                    self.buffer_()


                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 841
                    self.count()


                self.state = 844
                self.match(CommandParser.UpperY)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 845
                    self.count()


                self.state = 848
                self.match(CommandParser.LowerZ)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 849
                self.match(CommandParser.UpperZ)
                self.state = 850
                self.match(CommandParser.UpperZ)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 851
                self.viMotion()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ControlD(self):
            return self.getToken(CommandParser.ControlD, 0)

        def ControlH(self):
            return self.getToken(CommandParser.ControlH, 0)

        def ControlJ(self):
            return self.getToken(CommandParser.ControlJ, 0)

        def ControlM(self):
            return self.getToken(CommandParser.ControlM, 0)

        def ControlT(self):
            return self.getToken(CommandParser.ControlT, 0)

        def ControlU(self):
            return self.getToken(CommandParser.ControlU, 0)

        def ControlV(self):
            return self.getToken(CommandParser.ControlV, 0)

        def ControlQ(self):
            return self.getToken(CommandParser.ControlQ, 0)

        def ControlW(self):
            return self.getToken(CommandParser.ControlW, 0)

        def ControlLBrack(self):
            return self.getToken(CommandParser.ControlLBrack, 0)

        def getRuleIndex(self):
            return CommandParser.RULE_inCommand

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInCommand" ):
                return visitor.visitInCommand(self)
            else:
                return visitor.visitChildren(self)




    def inCommand(self):

        localctx = CommandParser.InCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_inCommand)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 300173856) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExMoreCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Slash(self):
            return self.getToken(CommandParser.Slash, 0)

        def pattern(self):
            return self.getTypedRuleContext(CommandParser.PatternContext,0)


        def ExclSym(self):
            return self.getToken(CommandParser.ExclSym, 0)

        def Quest(self):
            return self.getToken(CommandParser.Quest, 0)

        def Colon(self):
            return self.getToken(CommandParser.Colon, 0)

        def NextSym(self):
            return self.getToken(CommandParser.NextSym, 0)

        def PrevSym(self):
            return self.getToken(CommandParser.PrevSym, 0)

        def LowerQ(self):
            return self.getToken(CommandParser.LowerQ, 0)

        def TagSym(self):
            return self.getToken(CommandParser.TagSym, 0)

        def tagString(self):
            return self.getTypedRuleContext(CommandParser.TagStringContext,0)


        def getRuleIndex(self):
            return CommandParser.RULE_exMoreCommand

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExMoreCommand" ):
                return visitor.visitExMoreCommand(self)
            else:
                return visitor.visitChildren(self)




    def exMoreCommand(self):

        localctx = CommandParser.ExMoreCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_exMoreCommand)
        self._la = 0 # Token type
        try:
            self.state = 875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 856
                self.match(CommandParser.Slash)
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 857
                    self.match(CommandParser.ExclSym)


                self.state = 860
                self.pattern()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 861
                self.match(CommandParser.Quest)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 862
                    self.match(CommandParser.ExclSym)


                self.state = 865
                self.pattern()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 866
                self.match(CommandParser.Colon)
                self.state = 867
                self.match(CommandParser.NextSym)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 868
                self.match(CommandParser.Colon)
                self.state = 869
                self.match(CommandParser.PrevSym)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 870
                self.match(CommandParser.Colon)
                self.state = 871
                self.match(CommandParser.LowerQ)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 872
                self.match(CommandParser.Colon)
                self.state = 873
                self.match(CommandParser.TagSym)
                self.state = 874
                self.tagString()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ViMoreCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Space(self):
            return self.getToken(CommandParser.Space, 0)

        def count(self):
            return self.getTypedRuleContext(CommandParser.CountContext,0)


        def LowerF(self):
            return self.getToken(CommandParser.LowerF, 0)

        def ControlF(self):
            return self.getToken(CommandParser.ControlF, 0)

        def LowerB(self):
            return self.getToken(CommandParser.LowerB, 0)

        def ControlB(self):
            return self.getToken(CommandParser.ControlB, 0)

        def LowerJ(self):
            return self.getToken(CommandParser.LowerJ, 0)

        def ControlJ(self):
            return self.getToken(CommandParser.ControlJ, 0)

        def LowerK(self):
            return self.getToken(CommandParser.LowerK, 0)

        def LowerD(self):
            return self.getToken(CommandParser.LowerD, 0)

        def ControlD(self):
            return self.getToken(CommandParser.ControlD, 0)

        def LowerU(self):
            return self.getToken(CommandParser.LowerU, 0)

        def ControlU(self):
            return self.getToken(CommandParser.ControlU, 0)

        def LowerS(self):
            return self.getToken(CommandParser.LowerS, 0)

        def LowerG(self):
            return self.getToken(CommandParser.LowerG, 0)

        def UpperG(self):
            return self.getToken(CommandParser.UpperG, 0)

        def LowerR(self):
            return self.getToken(CommandParser.LowerR, 0)

        def ControlL(self):
            return self.getToken(CommandParser.ControlL, 0)

        def UpperR(self):
            return self.getToken(CommandParser.UpperR, 0)

        def LowerM(self):
            return self.getToken(CommandParser.LowerM, 0)

        def letter(self):
            return self.getTypedRuleContext(CommandParser.LetterContext,0)


        def Apos(self, i:int=None):
            if i is None:
                return self.getTokens(CommandParser.Apos)
            else:
                return self.getToken(CommandParser.Apos, i)

        def LowerN(self):
            return self.getToken(CommandParser.LowerN, 0)

        def UpperN(self):
            return self.getToken(CommandParser.UpperN, 0)

        def LowerV(self):
            return self.getToken(CommandParser.LowerV, 0)

        def Equal(self):
            return self.getToken(CommandParser.Equal, 0)

        def ControlG(self):
            return self.getToken(CommandParser.ControlG, 0)

        def LowerQ(self):
            return self.getToken(CommandParser.LowerQ, 0)

        def UpperZ(self, i:int=None):
            if i is None:
                return self.getTokens(CommandParser.UpperZ)
            else:
                return self.getToken(CommandParser.UpperZ, i)

        def exMoreCommand(self):
            return self.getTypedRuleContext(CommandParser.ExMoreCommandContext,0)


        def newline(self):
            return self.getTypedRuleContext(CommandParser.NewlineContext,0)


        def getRuleIndex(self):
            return CommandParser.RULE_viMoreCommand

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitViMoreCommand" ):
                return visitor.visitViMoreCommand(self)
            else:
                return visitor.visitChildren(self)




    def viMoreCommand(self):

        localctx = CommandParser.ViMoreCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_viMoreCommand)
        self._la = 0 # Token type
        try:
            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 877
                    self.count()


                self.state = 880
                self.match(CommandParser.Space)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 881
                    self.count()


                self.state = 884
                self.match(CommandParser.LowerF)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 885
                    self.count()


                self.state = 888
                self.match(CommandParser.ControlF)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 889
                    self.count()


                self.state = 892
                self.match(CommandParser.LowerB)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 893
                    self.count()


                self.state = 896
                self.match(CommandParser.ControlB)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 897
                    self.count()


                self.state = 900
                self.match(CommandParser.LowerJ)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 901
                    self.count()


                self.state = 904
                self.match(CommandParser.ControlJ)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 905
                    self.count()


                self.state = 908
                self.match(CommandParser.LowerK)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 909
                    self.count()


                self.state = 912
                self.match(CommandParser.LowerD)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 913
                    self.count()


                self.state = 916
                self.match(CommandParser.ControlD)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 917
                    self.count()


                self.state = 920
                self.match(CommandParser.LowerU)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 921
                    self.count()


                self.state = 924
                self.match(CommandParser.ControlU)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 925
                    self.count()


                self.state = 928
                self.match(CommandParser.LowerS)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 929
                    self.count()


                self.state = 932
                self.match(CommandParser.LowerG)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 933
                    self.count()


                self.state = 936
                self.match(CommandParser.UpperG)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 937
                self.match(CommandParser.LowerR)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 938
                self.match(CommandParser.ControlL)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 939
                self.match(CommandParser.UpperR)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 940
                self.match(CommandParser.LowerM)
                self.state = 941
                self.letter()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 942
                self.match(CommandParser.Apos)
                self.state = 943
                self.letter()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 944
                self.match(CommandParser.Apos)
                self.state = 945
                self.match(CommandParser.Apos)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 946
                    self.count()


                self.state = 949
                self.match(CommandParser.LowerN)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 950
                    self.count()


                self.state = 953
                self.match(CommandParser.UpperN)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 954
                self.match(CommandParser.LowerV)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 955
                self.match(CommandParser.Equal)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 956
                self.match(CommandParser.ControlG)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 957
                self.match(CommandParser.LowerQ)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 958
                self.match(CommandParser.UpperZ)
                self.state = 959
                self.match(CommandParser.UpperZ)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 960
                    self.count()


                self.state = 963
                self.exMoreCommand()
                self.state = 964
                self.newline()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





